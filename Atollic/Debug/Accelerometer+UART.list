
Accelerometer+UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080029e4  080029e4  000129e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          00000178  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200001f8  200001f8  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001061c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000022d5  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000413a  00000000  00000000  000329a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000750  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000421b  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002e7a  00000000  00000000  0003bd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003ebf5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000017b4  00000000  00000000  0003ec74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029cc 	.word	0x080029cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080029cc 	.word	0x080029cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8a8 	bl	80006fc <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000018 	.word	0x20000018
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f001 fc4a 	bl	8001e98 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000010c 	.word	0x2000010c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000010c 	.word	0x2000010c

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfaf      	iteee	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
 80006c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	bfa5      	ittet	ge
 80006cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e4:	0942      	lsrs	r2, r0, #5
 80006e6:	2301      	movs	r3, #1
 80006e8:	f000 001f 	and.w	r0, r0, #31
 80006ec:	fa03 f000 	lsl.w	r0, r3, r0
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <HAL_NVIC_EnableIRQ+0x14>)
 80006f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	3801      	subs	r0, #1
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000702:	d20a      	bcs.n	800071a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	21f0      	movs	r1, #240	; 0xf0
 800070c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000728:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800072c:	2b02      	cmp	r3, #2
 800072e:	d003      	beq.n	8000738 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000734:	2001      	movs	r0, #1
 8000736:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000738:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800073a:	2305      	movs	r3, #5
 800073c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000740:	6813      	ldr	r3, [r2, #0]
 8000742:	f023 0301 	bic.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000748:	2000      	movs	r0, #0
}
 800074a:	4770      	bx	lr

0800074c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000750:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000904 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000758:	4a68      	ldr	r2, [pc, #416]	; (80008fc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800075a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000908 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000760:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000762:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000768:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000770:	45b6      	cmp	lr, r6
 8000772:	f040 80ae 	bne.w	80008d2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000776:	684c      	ldr	r4, [r1, #4]
 8000778:	f024 0710 	bic.w	r7, r4, #16
 800077c:	2f02      	cmp	r7, #2
 800077e:	d116      	bne.n	80007ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000780:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000784:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000788:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800078c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000790:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000794:	f04f 0c0f 	mov.w	ip, #15
 8000798:	fa0c fc0b 	lsl.w	ip, ip, fp
 800079c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007a0:	690d      	ldr	r5, [r1, #16]
 80007a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80007a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80007ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80007bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d6:	d811      	bhi.n	80007fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007de:	68cf      	ldr	r7, [r1, #12]
 80007e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007f4:	409f      	lsls	r7, r3
 80007f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000800:	688f      	ldr	r7, [r1, #8]
 8000802:	fa07 f70a 	lsl.w	r7, r7, sl
 8000806:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000808:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080a:	00e5      	lsls	r5, r4, #3
 800080c:	d561      	bpl.n	80008d2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	f04f 0b00 	mov.w	fp, #0
 8000812:	f8cd b00c 	str.w	fp, [sp, #12]
 8000816:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081a:	4d39      	ldr	r5, [pc, #228]	; (8000900 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000820:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000824:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000828:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800082c:	9703      	str	r7, [sp, #12]
 800082e:	9f03      	ldr	r7, [sp, #12]
 8000830:	f023 0703 	bic.w	r7, r3, #3
 8000834:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000838:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000840:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000844:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000848:	f04f 0e0f 	mov.w	lr, #15
 800084c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000850:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000852:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000856:	d043      	beq.n	80008e0 <HAL_GPIO_Init+0x194>
 8000858:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085c:	42a8      	cmp	r0, r5
 800085e:	d041      	beq.n	80008e4 <HAL_GPIO_Init+0x198>
 8000860:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000864:	42a8      	cmp	r0, r5
 8000866:	d03f      	beq.n	80008e8 <HAL_GPIO_Init+0x19c>
 8000868:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086c:	42a8      	cmp	r0, r5
 800086e:	d03d      	beq.n	80008ec <HAL_GPIO_Init+0x1a0>
 8000870:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000874:	42a8      	cmp	r0, r5
 8000876:	d03b      	beq.n	80008f0 <HAL_GPIO_Init+0x1a4>
 8000878:	4548      	cmp	r0, r9
 800087a:	d03b      	beq.n	80008f4 <HAL_GPIO_Init+0x1a8>
 800087c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000880:	42a8      	cmp	r0, r5
 8000882:	d039      	beq.n	80008f8 <HAL_GPIO_Init+0x1ac>
 8000884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	bf14      	ite	ne
 800088c:	2508      	movne	r5, #8
 800088e:	2507      	moveq	r5, #7
 8000890:	fa05 f50c 	lsl.w	r5, r5, ip
 8000894:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000898:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800089a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800089c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800089e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008a2:	bf0c      	ite	eq
 80008a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008a8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008aa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008b6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008b8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008be:	bf0c      	ite	eq
 80008c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008c2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008c4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008c6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008ca:	bf54      	ite	pl
 80008cc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008ce:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008d0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	3301      	adds	r3, #1
 80008d4:	2b10      	cmp	r3, #16
 80008d6:	f47f af44 	bne.w	8000762 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008da:	b005      	add	sp, #20
 80008dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008e0:	465d      	mov	r5, fp
 80008e2:	e7d5      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008e4:	2501      	movs	r5, #1
 80008e6:	e7d3      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008e8:	2502      	movs	r5, #2
 80008ea:	e7d1      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008ec:	2503      	movs	r5, #3
 80008ee:	e7cf      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008f0:	2504      	movs	r5, #4
 80008f2:	e7cd      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008f4:	2505      	movs	r5, #5
 80008f6:	e7cb      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008f8:	2506      	movs	r5, #6
 80008fa:	e7c9      	b.n	8000890 <HAL_GPIO_Init+0x144>
 80008fc:	40013c00 	.word	0x40013c00
 8000900:	40020000 	.word	0x40020000
 8000904:	40023800 	.word	0x40023800
 8000908:	40021400 	.word	0x40021400

0800090c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800090c:	b10a      	cbz	r2, 8000912 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800090e:	6181      	str	r1, [r0, #24]
 8000910:	4770      	bx	lr
 8000912:	0409      	lsls	r1, r1, #16
 8000914:	e7fb      	b.n	800090e <HAL_GPIO_WritePin+0x2>

08000916 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000916:	4770      	bx	lr

08000918 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000918:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800091c:	6959      	ldr	r1, [r3, #20]
 800091e:	4201      	tst	r1, r0
 8000920:	d002      	beq.n	8000928 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000922:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000924:	f7ff fff7 	bl	8000916 <HAL_GPIO_EXTI_Callback>
 8000928:	bd08      	pop	{r3, pc}
 800092a:	bf00      	nop
 800092c:	40013c00 	.word	0x40013c00

08000930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000934:	4604      	mov	r4, r0
 8000936:	b918      	cbnz	r0, 8000940 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800093a:	b002      	add	sp, #8
 800093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000940:	6803      	ldr	r3, [r0, #0]
 8000942:	07dd      	lsls	r5, r3, #31
 8000944:	d410      	bmi.n	8000968 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000946:	6823      	ldr	r3, [r4, #0]
 8000948:	0798      	lsls	r0, r3, #30
 800094a:	d458      	bmi.n	80009fe <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	071a      	lsls	r2, r3, #28
 8000950:	f100 809a 	bmi.w	8000a88 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	075b      	lsls	r3, r3, #29
 8000958:	f100 80b8 	bmi.w	8000acc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800095c:	69a2      	ldr	r2, [r4, #24]
 800095e:	2a00      	cmp	r2, #0
 8000960:	f040 8119 	bne.w	8000b96 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000964:	2000      	movs	r0, #0
 8000966:	e7e8      	b.n	800093a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000968:	4ba6      	ldr	r3, [pc, #664]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f002 020c 	and.w	r2, r2, #12
 8000970:	2a04      	cmp	r2, #4
 8000972:	d007      	beq.n	8000984 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800097a:	2a08      	cmp	r2, #8
 800097c:	d10a      	bne.n	8000994 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	0259      	lsls	r1, r3, #9
 8000982:	d507      	bpl.n	8000994 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000984:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	039a      	lsls	r2, r3, #14
 800098a:	d5dc      	bpl.n	8000946 <HAL_RCC_OscConfig+0x16>
 800098c:	6863      	ldr	r3, [r4, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1d9      	bne.n	8000946 <HAL_RCC_OscConfig+0x16>
 8000992:	e7d1      	b.n	8000938 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000994:	6863      	ldr	r3, [r4, #4]
 8000996:	4d9b      	ldr	r5, [pc, #620]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800099c:	d111      	bne.n	80009c2 <HAL_RCC_OscConfig+0x92>
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe3d 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009aa:	4d96      	ldr	r5, [pc, #600]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	039b      	lsls	r3, r3, #14
 80009b2:	d4c8      	bmi.n	8000946 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b4:	f7ff fe36 	bl	8000624 <HAL_GetTick>
 80009b8:	1b80      	subs	r0, r0, r6
 80009ba:	2864      	cmp	r0, #100	; 0x64
 80009bc:	d9f7      	bls.n	80009ae <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009be:	2003      	movs	r0, #3
 80009c0:	e7bb      	b.n	800093a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009c6:	d104      	bne.n	80009d2 <HAL_RCC_OscConfig+0xa2>
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ce:	602b      	str	r3, [r5, #0]
 80009d0:	e7e5      	b.n	800099e <HAL_RCC_OscConfig+0x6e>
 80009d2:	682a      	ldr	r2, [r5, #0]
 80009d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009d8:	602a      	str	r2, [r5, #0]
 80009da:	682a      	ldr	r2, [r5, #0]
 80009dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009e0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1df      	bne.n	80009a6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009e6:	f7ff fe1d 	bl	8000624 <HAL_GetTick>
 80009ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	039f      	lsls	r7, r3, #14
 80009f0:	d5a9      	bpl.n	8000946 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f2:	f7ff fe17 	bl	8000624 <HAL_GetTick>
 80009f6:	1b80      	subs	r0, r0, r6
 80009f8:	2864      	cmp	r0, #100	; 0x64
 80009fa:	d9f7      	bls.n	80009ec <HAL_RCC_OscConfig+0xbc>
 80009fc:	e7df      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009fe:	4b81      	ldr	r3, [pc, #516]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	f012 0f0c 	tst.w	r2, #12
 8000a06:	d007      	beq.n	8000a18 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a0e:	2a08      	cmp	r2, #8
 8000a10:	d111      	bne.n	8000a36 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	025e      	lsls	r6, r3, #9
 8000a16:	d40e      	bmi.n	8000a36 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	4b7a      	ldr	r3, [pc, #488]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	0795      	lsls	r5, r2, #30
 8000a1e:	d502      	bpl.n	8000a26 <HAL_RCC_OscConfig+0xf6>
 8000a20:	68e2      	ldr	r2, [r4, #12]
 8000a22:	2a01      	cmp	r2, #1
 8000a24:	d188      	bne.n	8000938 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	6921      	ldr	r1, [r4, #16]
 8000a2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a2e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a34:	e78a      	b.n	800094c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a36:	68e2      	ldr	r2, [r4, #12]
 8000a38:	4b73      	ldr	r3, [pc, #460]	; (8000c08 <HAL_RCC_OscConfig+0x2d8>)
 8000a3a:	b1b2      	cbz	r2, 8000a6a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a40:	f7ff fdf0 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a44:	4d6f      	ldr	r5, [pc, #444]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	0798      	lsls	r0, r3, #30
 8000a4c:	d507      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4e:	682b      	ldr	r3, [r5, #0]
 8000a50:	6922      	ldr	r2, [r4, #16]
 8000a52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a5a:	602b      	str	r3, [r5, #0]
 8000a5c:	e776      	b.n	800094c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fde1 	bl	8000624 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	2802      	cmp	r0, #2
 8000a66:	d9ef      	bls.n	8000a48 <HAL_RCC_OscConfig+0x118>
 8000a68:	e7a9      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a6c:	f7ff fdda 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a70:	4d64      	ldr	r5, [pc, #400]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	0799      	lsls	r1, r3, #30
 8000a78:	f57f af68 	bpl.w	800094c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fdd2 	bl	8000624 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9f6      	bls.n	8000a74 <HAL_RCC_OscConfig+0x144>
 8000a86:	e79a      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a88:	6962      	ldr	r2, [r4, #20]
 8000a8a:	4b60      	ldr	r3, [pc, #384]	; (8000c0c <HAL_RCC_OscConfig+0x2dc>)
 8000a8c:	b17a      	cbz	r2, 8000aae <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a92:	f7ff fdc7 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a96:	4d5b      	ldr	r5, [pc, #364]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9c:	079f      	lsls	r7, r3, #30
 8000a9e:	f53f af59 	bmi.w	8000954 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fdbf 	bl	8000624 <HAL_GetTick>
 8000aa6:	1b80      	subs	r0, r0, r6
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d9f6      	bls.n	8000a9a <HAL_RCC_OscConfig+0x16a>
 8000aac:	e787      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000aae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab0:	f7ff fdb8 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab4:	4d53      	ldr	r5, [pc, #332]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ab6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000aba:	0798      	lsls	r0, r3, #30
 8000abc:	f57f af4a 	bpl.w	8000954 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac0:	f7ff fdb0 	bl	8000624 <HAL_GetTick>
 8000ac4:	1b80      	subs	r0, r0, r6
 8000ac6:	2802      	cmp	r0, #2
 8000ac8:	d9f6      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x188>
 8000aca:	e778      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000acc:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ad4:	d128      	bne.n	8000b28 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	9201      	str	r2, [sp, #4]
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ada:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ade:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000aea:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aec:	4d48      	ldr	r5, [pc, #288]	; (8000c10 <HAL_RCC_OscConfig+0x2e0>)
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	05d9      	lsls	r1, r3, #23
 8000af2:	d51b      	bpl.n	8000b2c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af4:	68a3      	ldr	r3, [r4, #8]
 8000af6:	4d43      	ldr	r5, [pc, #268]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d127      	bne.n	8000b4c <HAL_RCC_OscConfig+0x21c>
 8000afc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b04:	f7ff fd8e 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b08:	4d3e      	ldr	r5, [pc, #248]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b0a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b12:	079b      	lsls	r3, r3, #30
 8000b14:	d539      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	f43f af20 	beq.w	800095c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b1c:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000b1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	e719      	b.n	800095c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e7df      	b.n	8000aec <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b2c:	682b      	ldr	r3, [r5, #0]
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b34:	f7ff fd76 	bl	8000624 <HAL_GetTick>
 8000b38:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	05da      	lsls	r2, r3, #23
 8000b3e:	d4d9      	bmi.n	8000af4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b40:	f7ff fd70 	bl	8000624 <HAL_GetTick>
 8000b44:	1bc0      	subs	r0, r0, r7
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f7      	bls.n	8000b3a <HAL_RCC_OscConfig+0x20a>
 8000b4a:	e738      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d104      	bne.n	8000b5a <HAL_RCC_OscConfig+0x22a>
 8000b50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	672b      	str	r3, [r5, #112]	; 0x70
 8000b58:	e7d0      	b.n	8000afc <HAL_RCC_OscConfig+0x1cc>
 8000b5a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b5c:	f022 0201 	bic.w	r2, r2, #1
 8000b60:	672a      	str	r2, [r5, #112]	; 0x70
 8000b62:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b64:	f022 0204 	bic.w	r2, r2, #4
 8000b68:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ca      	bne.n	8000b04 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b6e:	f7ff fd59 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b76:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b7a:	0798      	lsls	r0, r3, #30
 8000b7c:	d5cb      	bpl.n	8000b16 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fd51 	bl	8000624 <HAL_GetTick>
 8000b82:	1bc0      	subs	r0, r0, r7
 8000b84:	4540      	cmp	r0, r8
 8000b86:	d9f7      	bls.n	8000b78 <HAL_RCC_OscConfig+0x248>
 8000b88:	e719      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b8a:	f7ff fd4b 	bl	8000624 <HAL_GetTick>
 8000b8e:	1bc0      	subs	r0, r0, r7
 8000b90:	4540      	cmp	r0, r8
 8000b92:	d9bd      	bls.n	8000b10 <HAL_RCC_OscConfig+0x1e0>
 8000b94:	e713      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b96:	4d1b      	ldr	r5, [pc, #108]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
 8000b98:	68ab      	ldr	r3, [r5, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	f43f aeca 	beq.w	8000938 <HAL_RCC_OscConfig+0x8>
 8000ba4:	4e1b      	ldr	r6, [pc, #108]	; (8000c14 <HAL_RCC_OscConfig+0x2e4>)
 8000ba6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000baa:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bac:	d134      	bne.n	8000c18 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000bae:	f7ff fd39 	bl	8000624 <HAL_GetTick>
 8000bb2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	0199      	lsls	r1, r3, #6
 8000bb8:	d41e      	bmi.n	8000bf8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bba:	6a22      	ldr	r2, [r4, #32]
 8000bbc:	69e3      	ldr	r3, [r4, #28]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bc2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bce:	4c0d      	ldr	r4, [pc, #52]	; (8000c04 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bd0:	0852      	lsrs	r2, r2, #1
 8000bd2:	3a01      	subs	r2, #1
 8000bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bd8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bda:	2301      	movs	r3, #1
 8000bdc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bde:	f7ff fd21 	bl	8000624 <HAL_GetTick>
 8000be2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	019a      	lsls	r2, r3, #6
 8000be8:	f53f aebc 	bmi.w	8000964 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fd1a 	bl	8000624 <HAL_GetTick>
 8000bf0:	1b40      	subs	r0, r0, r5
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9f6      	bls.n	8000be4 <HAL_RCC_OscConfig+0x2b4>
 8000bf6:	e6e2      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf8:	f7ff fd14 	bl	8000624 <HAL_GetTick>
 8000bfc:	1bc0      	subs	r0, r0, r7
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d9d8      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x284>
 8000c02:	e6dc      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
 8000c04:	40023800 	.word	0x40023800
 8000c08:	42470000 	.word	0x42470000
 8000c0c:	42470e80 	.word	0x42470e80
 8000c10:	40007000 	.word	0x40007000
 8000c14:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000c18:	f7ff fd04 	bl	8000624 <HAL_GetTick>
 8000c1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	f57f ae9f 	bpl.w	8000964 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fcfd 	bl	8000624 <HAL_GetTick>
 8000c2a:	1b00      	subs	r0, r0, r4
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2ee>
 8000c30:	e6c5      	b.n	80009be <HAL_RCC_OscConfig+0x8e>
 8000c32:	bf00      	nop

08000c34 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c34:	4913      	ldr	r1, [pc, #76]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c36:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c38:	688b      	ldr	r3, [r1, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d003      	beq.n	8000c4a <HAL_RCC_GetSysClockFreq+0x16>
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d003      	beq.n	8000c4e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c48:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c4a:	4810      	ldr	r0, [pc, #64]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x58>)
 8000c4c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c50:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c52:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c54:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c58:	bf14      	ite	ne
 8000c5a:	480c      	ldrne	r0, [pc, #48]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5c:	480a      	ldreq	r0, [pc, #40]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c62:	bf18      	it	ne
 8000c64:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c6a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c6e:	f7ff fb07 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c82:	bd08      	pop	{r3, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	00f42400 	.word	0x00f42400
 8000c8c:	007a1200 	.word	0x007a1200

08000c90 <HAL_RCC_ClockConfig>:
{
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c94:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c96:	4604      	mov	r4, r0
 8000c98:	b910      	cbnz	r0, 8000ca0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <HAL_RCC_ClockConfig+0x124>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	f002 020f 	and.w	r2, r2, #15
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	d328      	bcc.n	8000cfe <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cac:	6821      	ldr	r1, [r4, #0]
 8000cae:	078f      	lsls	r7, r1, #30
 8000cb0:	d42d      	bmi.n	8000d0e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cb2:	07c8      	lsls	r0, r1, #31
 8000cb4:	d440      	bmi.n	8000d38 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <HAL_RCC_ClockConfig+0x124>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f002 020f 	and.w	r2, r2, #15
 8000cbe:	4295      	cmp	r5, r2
 8000cc0:	d366      	bcc.n	8000d90 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	0751      	lsls	r1, r2, #29
 8000cc6:	d46c      	bmi.n	8000da2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc8:	0713      	lsls	r3, r2, #28
 8000cca:	d507      	bpl.n	8000cdc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ccc:	4a3a      	ldr	r2, [pc, #232]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
 8000cce:	6921      	ldr	r1, [r4, #16]
 8000cd0:	6893      	ldr	r3, [r2, #8]
 8000cd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cda:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cdc:	f7ff ffaa 	bl	8000c34 <HAL_RCC_GetSysClockFreq>
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <HAL_RCC_ClockConfig+0x12c>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	40d8      	lsrs	r0, r3
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_RCC_ClockConfig+0x130>)
 8000cf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fc4c 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d1c6      	bne.n	8000c9a <HAL_RCC_ClockConfig+0xa>
 8000d0c:	e7ce      	b.n	8000cac <HAL_RCC_ClockConfig+0x1c>
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d10:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d14:	bf1e      	ittt	ne
 8000d16:	689a      	ldrne	r2, [r3, #8]
 8000d18:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d1c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d1e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d20:	bf42      	ittt	mi
 8000d22:	689a      	ldrmi	r2, [r3, #8]
 8000d24:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d28:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	68a0      	ldr	r0, [r4, #8]
 8000d2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d32:	4302      	orrs	r2, r0
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	e7bc      	b.n	8000cb2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d38:	6862      	ldr	r2, [r4, #4]
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d11d      	bne.n	8000d7c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d46:	d0a8      	beq.n	8000c9a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d48:	4e1b      	ldr	r6, [pc, #108]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
 8000d4a:	68b3      	ldr	r3, [r6, #8]
 8000d4c:	f023 0303 	bic.w	r3, r3, #3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d54:	f7ff fc66 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d58:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d5c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5e:	68b3      	ldr	r3, [r6, #8]
 8000d60:	6862      	ldr	r2, [r4, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d6a:	d0a4      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6c:	f7ff fc5a 	bl	8000624 <HAL_GetTick>
 8000d70:	1bc0      	subs	r0, r0, r7
 8000d72:	4540      	cmp	r0, r8
 8000d74:	d9f3      	bls.n	8000d5e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d76:	2003      	movs	r0, #3
}
 8000d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d7c:	1e91      	subs	r1, r2, #2
 8000d7e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d80:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d82:	d802      	bhi.n	8000d8a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d88:	e7dd      	b.n	8000d46 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8a:	f013 0f02 	tst.w	r3, #2
 8000d8e:	e7da      	b.n	8000d46 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d90:	b2ea      	uxtb	r2, r5
 8000d92:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	429d      	cmp	r5, r3
 8000d9c:	f47f af7d 	bne.w	8000c9a <HAL_RCC_ClockConfig+0xa>
 8000da0:	e78f      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <HAL_RCC_ClockConfig+0x128>)
 8000da4:	68e0      	ldr	r0, [r4, #12]
 8000da6:	688b      	ldr	r3, [r1, #8]
 8000da8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dac:	4303      	orrs	r3, r0
 8000dae:	608b      	str	r3, [r1, #8]
 8000db0:	e78a      	b.n	8000cc8 <HAL_RCC_ClockConfig+0x38>
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	080029e9 	.word	0x080029e9
 8000dc0:	20000018 	.word	0x20000018

08000dc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dce:	5cd3      	ldrb	r3, [r2, r3]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dd2:	6810      	ldr	r0, [r2, #0]
}
 8000dd4:	40d8      	lsrs	r0, r3
 8000dd6:	4770      	bx	lr
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	080029f9 	.word	0x080029f9
 8000de0:	20000018 	.word	0x20000018

08000de4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000df2:	6810      	ldr	r0, [r2, #0]
}
 8000df4:	40d8      	lsrs	r0, r3
 8000df6:	4770      	bx	lr
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	080029f9 	.word	0x080029f9
 8000e00:	20000018 	.word	0x20000018

08000e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e08:	9e06      	ldr	r6, [sp, #24]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4688      	mov	r8, r1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	6893      	ldr	r3, [r2, #8]
 8000e16:	ea38 0303 	bics.w	r3, r8, r3
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	429f      	cmp	r7, r3
 8000e22:	d102      	bne.n	8000e2a <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e24:	2000      	movs	r0, #0
}
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e2a:	1c6b      	adds	r3, r5, #1
 8000e2c:	d0f2      	beq.n	8000e14 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e2e:	bb55      	cbnz	r5, 8000e86 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e38:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e3a:	6862      	ldr	r2, [r4, #4]
 8000e3c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e40:	d10a      	bne.n	8000e58 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000e42:	68a2      	ldr	r2, [r4, #8]
 8000e44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e48:	d002      	beq.n	8000e50 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000e4a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e4e:	d103      	bne.n	8000e58 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e56:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e5a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e5e:	d109      	bne.n	8000e74 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e66:	0412      	lsls	r2, r2, #16
 8000e68:	0c12      	lsrs	r2, r2, #16
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e72:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e80:	2003      	movs	r0, #3
 8000e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000e86:	f7ff fbcd 	bl	8000624 <HAL_GetTick>
 8000e8a:	1b80      	subs	r0, r0, r6
 8000e8c:	4285      	cmp	r5, r0
 8000e8e:	d8c0      	bhi.n	8000e12 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e90:	e7ce      	b.n	8000e30 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e92 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e92:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e94:	460b      	mov	r3, r1
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	2200      	movs	r2, #0
{
 8000e9c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e9e:	f7ff ffb1 	bl	8000e04 <SPI_WaitFlagStateUntilTimeout>
 8000ea2:	b120      	cbz	r0, 8000eae <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000eac:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000eae:	b002      	add	sp, #8
 8000eb0:	bd10      	pop	{r4, pc}

08000eb2 <HAL_SPI_Init>:
{
 8000eb2:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d036      	beq.n	8000f28 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8000ebe:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ec2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ec6:	b91b      	cbnz	r3, 8000ed0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000ec8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ecc:	f001 f804 	bl	8001ed8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000ed0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ed2:	68a0      	ldr	r0, [r4, #8]
 8000ed4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000edc:	680b      	ldr	r3, [r1, #0]
 8000ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ee2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	4303      	orrs	r3, r0
 8000ee8:	68e0      	ldr	r0, [r4, #12]
 8000eea:	4303      	orrs	r3, r0
 8000eec:	6920      	ldr	r0, [r4, #16]
 8000eee:	4303      	orrs	r3, r0
 8000ef0:	6960      	ldr	r0, [r4, #20]
 8000ef2:	4303      	orrs	r3, r0
 8000ef4:	69e0      	ldr	r0, [r4, #28]
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	6a20      	ldr	r0, [r4, #32]
 8000efa:	4303      	orrs	r3, r0
 8000efc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000efe:	4303      	orrs	r3, r0
 8000f00:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f04:	4303      	orrs	r3, r0
 8000f06:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f08:	0c12      	lsrs	r2, r2, #16
 8000f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f0c:	f002 0204 	and.w	r2, r2, #4
 8000f10:	431a      	orrs	r2, r3
 8000f12:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f14:	69cb      	ldr	r3, [r1, #28]
 8000f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f1a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f1c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f1e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f20:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	bd10      	pop	{r4, pc}

08000f2c <HAL_SPI_Transmit>:
{
 8000f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000f30:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f32:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000f36:	2b01      	cmp	r3, #1
{
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000f3e:	f000 809c 	beq.w	800107a <HAL_SPI_Transmit+0x14e>
 8000f42:	2301      	movs	r3, #1
 8000f44:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f48:	f7ff fb6c 	bl	8000624 <HAL_GetTick>
 8000f4c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f4e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000f52:	b2c0      	uxtb	r0, r0
 8000f54:	2801      	cmp	r0, #1
 8000f56:	f040 808e 	bne.w	8001076 <HAL_SPI_Transmit+0x14a>
  if((pData == NULL ) || (Size == 0))
 8000f5a:	2d00      	cmp	r5, #0
 8000f5c:	d04e      	beq.n	8000ffc <HAL_SPI_Transmit+0xd0>
 8000f5e:	f1b8 0f00 	cmp.w	r8, #0
 8000f62:	d04b      	beq.n	8000ffc <HAL_SPI_Transmit+0xd0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000f6e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000f70:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000f74:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000f76:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000f78:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000f7a:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f7c:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000f7e:	6325      	str	r5, [r4, #48]	; 0x30
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f84:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000f86:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000f8a:	bf02      	ittt	eq
 8000f8c:	681a      	ldreq	r2, [r3, #0]
 8000f8e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000f92:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000f98:	bf5e      	ittt	pl
 8000f9a:	681a      	ldrpl	r2, [r3, #0]
 8000f9c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000fa0:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fa2:	68e2      	ldr	r2, [r4, #12]
 8000fa4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fa8:	6862      	ldr	r2, [r4, #4]
 8000faa:	d138      	bne.n	800101e <HAL_SPI_Transmit+0xf2>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000fac:	b11a      	cbz	r2, 8000fb6 <HAL_SPI_Transmit+0x8a>
 8000fae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	2a01      	cmp	r2, #1
 8000fb4:	d106      	bne.n	8000fc4 <HAL_SPI_Transmit+0x98>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000fb6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fba:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000fbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000fc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b993      	cbnz	r3, 8000ff0 <HAL_SPI_Transmit+0xc4>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000fca:	9700      	str	r7, [sp, #0]
 8000fcc:	4633      	mov	r3, r6
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff ff16 	bl	8000e04 <SPI_WaitFlagStateUntilTimeout>
 8000fd8:	b978      	cbnz	r0, 8000ffa <HAL_SPI_Transmit+0xce>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000fda:	463a      	mov	r2, r7
 8000fdc:	4631      	mov	r1, r6
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff ff57 	bl	8000e92 <SPI_CheckFlag_BSY>
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d038      	beq.n	800105a <HAL_SPI_Transmit+0x12e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
    goto error;
 8000fee:	e005      	b.n	8000ffc <HAL_SPI_Transmit+0xd0>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	0790      	lsls	r0, r2, #30
 8000ff6:	d4de      	bmi.n	8000fb6 <HAL_SPI_Transmit+0x8a>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ff8:	b94e      	cbnz	r6, 800100e <HAL_SPI_Transmit+0xe2>
          errorcode = HAL_TIMEOUT;
 8000ffa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001002:	2300      	movs	r3, #0
 8001004:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001008:	b004      	add	sp, #16
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800100e:	1c71      	adds	r1, r6, #1
 8001010:	d0d8      	beq.n	8000fc4 <HAL_SPI_Transmit+0x98>
 8001012:	f7ff fb07 	bl	8000624 <HAL_GetTick>
 8001016:	1bc0      	subs	r0, r0, r7
 8001018:	4286      	cmp	r6, r0
 800101a:	d8d3      	bhi.n	8000fc4 <HAL_SPI_Transmit+0x98>
 800101c:	e7ed      	b.n	8000ffa <HAL_SPI_Transmit+0xce>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800101e:	b11a      	cbz	r2, 8001028 <HAL_SPI_Transmit+0xfc>
 8001020:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001022:	b292      	uxth	r2, r2
 8001024:	2a01      	cmp	r2, #1
 8001026:	d106      	bne.n	8001036 <HAL_SPI_Transmit+0x10a>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001028:	f815 2b01 	ldrb.w	r2, [r5], #1
 800102c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800102e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001030:	3b01      	subs	r3, #1
 8001032:	b29b      	uxth	r3, r3
 8001034:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001038:	b29b      	uxth	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0c5      	beq.n	8000fca <HAL_SPI_Transmit+0x9e>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	0792      	lsls	r2, r2, #30
 8001044:	d4f0      	bmi.n	8001028 <HAL_SPI_Transmit+0xfc>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001046:	2e00      	cmp	r6, #0
 8001048:	d0d7      	beq.n	8000ffa <HAL_SPI_Transmit+0xce>
 800104a:	1c73      	adds	r3, r6, #1
 800104c:	d0f3      	beq.n	8001036 <HAL_SPI_Transmit+0x10a>
 800104e:	f7ff fae9 	bl	8000624 <HAL_GetTick>
 8001052:	1bc0      	subs	r0, r0, r7
 8001054:	4286      	cmp	r6, r0
 8001056:	d8ee      	bhi.n	8001036 <HAL_SPI_Transmit+0x10a>
 8001058:	e7cf      	b.n	8000ffa <HAL_SPI_Transmit+0xce>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800105a:	68a3      	ldr	r3, [r4, #8]
 800105c:	b933      	cbnz	r3, 800106c <HAL_SPI_Transmit+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800105e:	9303      	str	r3, [sp, #12]
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	9203      	str	r2, [sp, #12]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	9303      	str	r3, [sp, #12]
 800106a:	9b03      	ldr	r3, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800106c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800106e:	3000      	adds	r0, #0
 8001070:	bf18      	it	ne
 8001072:	2001      	movne	r0, #1
 8001074:	e7c2      	b.n	8000ffc <HAL_SPI_Transmit+0xd0>
 8001076:	2002      	movs	r0, #2
 8001078:	e7c0      	b.n	8000ffc <HAL_SPI_Transmit+0xd0>
  __HAL_LOCK(hspi);
 800107a:	2002      	movs	r0, #2
 800107c:	e7c4      	b.n	8001008 <HAL_SPI_Transmit+0xdc>

0800107e <HAL_SPI_TransmitReceive>:
{
 800107e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001082:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001084:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001088:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800108a:	2b01      	cmp	r3, #1
{
 800108c:	4604      	mov	r4, r0
 800108e:	460d      	mov	r5, r1
 8001090:	4616      	mov	r6, r2
 8001092:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001094:	f000 80ed 	beq.w	8001272 <HAL_SPI_TransmitReceive+0x1f4>
 8001098:	2301      	movs	r3, #1
 800109a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800109e:	f7ff fac1 	bl	8000624 <HAL_GetTick>
  tmp  = hspi->State;
 80010a2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80010a6:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80010a8:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80010aa:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80010ac:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80010ae:	d00a      	beq.n	80010c6 <HAL_SPI_TransmitReceive+0x48>
 80010b0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80010b4:	f040 80db 	bne.w	800126e <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80010b8:	68a2      	ldr	r2, [r4, #8]
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	f040 80d7 	bne.w	800126e <HAL_SPI_TransmitReceive+0x1f0>
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	f040 80d4 	bne.w	800126e <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d04e      	beq.n	8001168 <HAL_SPI_TransmitReceive+0xea>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d04c      	beq.n	8001168 <HAL_SPI_TransmitReceive+0xea>
 80010ce:	f1b9 0f00 	cmp.w	r9, #0
 80010d2:	d049      	beq.n	8001168 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80010d4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80010d8:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80010da:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80010dc:	bf04      	itt	eq
 80010de:	2305      	moveq	r3, #5
 80010e0:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80010e8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80010ea:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010ec:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80010ee:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80010f2:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010f6:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80010f8:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80010fc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80010fe:	bf58      	it	pl
 8001100:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001102:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001104:	bf58      	it	pl
 8001106:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800110a:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800110e:	bf58      	it	pl
 8001110:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001112:	68e2      	ldr	r2, [r4, #12]
 8001114:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001118:	d15d      	bne.n	80011d6 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800111a:	b119      	cbz	r1, 8001124 <HAL_SPI_TransmitReceive+0xa6>
 800111c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800111e:	b292      	uxth	r2, r2
 8001120:	2a01      	cmp	r2, #1
 8001122:	d106      	bne.n	8001132 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001124:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001128:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800112a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800112c:	3b01      	subs	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001132:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001136:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001138:	b29b      	uxth	r3, r3
 800113a:	b9bb      	cbnz	r3, 800116c <HAL_SPI_TransmitReceive+0xee>
 800113c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800113e:	b29b      	uxth	r3, r3
 8001140:	b9a3      	cbnz	r3, 800116c <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001142:	f8cd 8000 	str.w	r8, [sp]
 8001146:	463b      	mov	r3, r7
 8001148:	2201      	movs	r2, #1
 800114a:	2102      	movs	r1, #2
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff fe59 	bl	8000e04 <SPI_WaitFlagStateUntilTimeout>
 8001152:	2800      	cmp	r0, #0
 8001154:	d135      	bne.n	80011c2 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001156:	4642      	mov	r2, r8
 8001158:	4639      	mov	r1, r7
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fe99 	bl	8000e92 <SPI_CheckFlag_BSY>
 8001160:	2800      	cmp	r0, #0
 8001162:	d079      	beq.n	8001258 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001164:	2320      	movs	r3, #32
 8001166:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	e02b      	b.n	80011c4 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800116c:	f1b9 0f00 	cmp.w	r9, #0
 8001170:	d00f      	beq.n	8001192 <HAL_SPI_TransmitReceive+0x114>
 8001172:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001174:	b29b      	uxth	r3, r3
 8001176:	b163      	cbz	r3, 8001192 <HAL_SPI_TransmitReceive+0x114>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	0791      	lsls	r1, r2, #30
 800117e:	d508      	bpl.n	8001192 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001180:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001184:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001186:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800118e:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001194:	b29b      	uxth	r3, r3
 8001196:	b163      	cbz	r3, 80011b2 <HAL_SPI_TransmitReceive+0x134>
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	07d2      	lsls	r2, r2, #31
 800119e:	d508      	bpl.n	80011b2 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80011a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011a8:	3b01      	subs	r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80011ae:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80011b2:	1c78      	adds	r0, r7, #1
 80011b4:	d0bf      	beq.n	8001136 <HAL_SPI_TransmitReceive+0xb8>
 80011b6:	f7ff fa35 	bl	8000624 <HAL_GetTick>
 80011ba:	eba0 0008 	sub.w	r0, r0, r8
 80011be:	4287      	cmp	r7, r0
 80011c0:	d8b9      	bhi.n	8001136 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80011ca:	2300      	movs	r3, #0
 80011cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80011d0:	b005      	add	sp, #20
 80011d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80011d6:	b119      	cbz	r1, 80011e0 <HAL_SPI_TransmitReceive+0x162>
 80011d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80011da:	b292      	uxth	r2, r2
 80011dc:	2a01      	cmp	r2, #1
 80011de:	d106      	bne.n	80011ee <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80011e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80011e4:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80011e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80011ee:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b91b      	cbnz	r3, 8001200 <HAL_SPI_TransmitReceive+0x182>
 80011f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0a0      	beq.n	8001142 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001200:	f1b9 0f00 	cmp.w	r9, #0
 8001204:	d00f      	beq.n	8001226 <HAL_SPI_TransmitReceive+0x1a8>
 8001206:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001208:	b29b      	uxth	r3, r3
 800120a:	b163      	cbz	r3, 8001226 <HAL_SPI_TransmitReceive+0x1a8>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	0791      	lsls	r1, r2, #30
 8001212:	d508      	bpl.n	8001226 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001214:	782a      	ldrb	r2, [r5, #0]
 8001216:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800121a:	3b01      	subs	r3, #1
 800121c:	b29b      	uxth	r3, r3
 800121e:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001220:	3501      	adds	r5, #1
        txallowed = 0U;
 8001222:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001226:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001228:	b29b      	uxth	r3, r3
 800122a:	b163      	cbz	r3, 8001246 <HAL_SPI_TransmitReceive+0x1c8>
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	07d2      	lsls	r2, r2, #31
 8001232:	d508      	bpl.n	8001246 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001238:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800123a:	3b01      	subs	r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001240:	3601      	adds	r6, #1
        txallowed = 1U;
 8001242:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001246:	1c7b      	adds	r3, r7, #1
 8001248:	d0d3      	beq.n	80011f2 <HAL_SPI_TransmitReceive+0x174>
 800124a:	f7ff f9eb 	bl	8000624 <HAL_GetTick>
 800124e:	eba0 0008 	sub.w	r0, r0, r8
 8001252:	4287      	cmp	r7, r0
 8001254:	d8cd      	bhi.n	80011f2 <HAL_SPI_TransmitReceive+0x174>
 8001256:	e7b4      	b.n	80011c2 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001258:	68a3      	ldr	r3, [r4, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1b2      	bne.n	80011c4 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	9003      	str	r0, [sp, #12]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	9203      	str	r2, [sp, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	9b03      	ldr	r3, [sp, #12]
 800126c:	e7aa      	b.n	80011c4 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 800126e:	2002      	movs	r0, #2
 8001270:	e7a8      	b.n	80011c4 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001272:	2002      	movs	r0, #2
 8001274:	e7ac      	b.n	80011d0 <HAL_SPI_TransmitReceive+0x152>

08001276 <HAL_SPI_Receive>:
{
 8001276:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800127a:	461e      	mov	r6, r3
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800127c:	6843      	ldr	r3, [r0, #4]
 800127e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8001282:	4604      	mov	r4, r0
 8001284:	460d      	mov	r5, r1
 8001286:	4690      	mov	r8, r2
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001288:	d10c      	bne.n	80012a4 <HAL_SPI_Receive+0x2e>
 800128a:	6883      	ldr	r3, [r0, #8]
 800128c:	b953      	cbnz	r3, 80012a4 <HAL_SPI_Receive+0x2e>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800128e:	2304      	movs	r3, #4
 8001290:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8001294:	4613      	mov	r3, r2
 8001296:	9600      	str	r6, [sp, #0]
 8001298:	460a      	mov	r2, r1
 800129a:	f7ff fef0 	bl	800107e <HAL_SPI_TransmitReceive>
}
 800129e:	b002      	add	sp, #8
 80012a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80012a4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f000 8081 	beq.w	80013b0 <HAL_SPI_Receive+0x13a>
 80012ae:	2301      	movs	r3, #1
 80012b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80012b4:	f7ff f9b6 	bl	8000624 <HAL_GetTick>
 80012b8:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80012ba:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80012be:	b2c0      	uxtb	r0, r0
 80012c0:	2801      	cmp	r0, #1
 80012c2:	d173      	bne.n	80013ac <HAL_SPI_Receive+0x136>
  if((pData == NULL ) || (Size == 0))
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d058      	beq.n	800137a <HAL_SPI_Receive+0x104>
 80012c8:	f1b8 0f00 	cmp.w	r8, #0
 80012cc:	d055      	beq.n	800137a <HAL_SPI_Receive+0x104>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80012ce:	2304      	movs	r3, #4
 80012d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80012d8:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 80012da:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 80012de:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80012e0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80012e2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80012e4:	6463      	str	r3, [r4, #68]	; 0x44
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012e6:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80012e8:	63a5      	str	r5, [r4, #56]	; 0x38
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ee:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferSize  = Size;
 80012f0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 80012f4:	bf02      	ittt	eq
 80012f6:	681a      	ldreq	r2, [r3, #0]
 80012f8:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 80012fc:	601a      	streq	r2, [r3, #0]
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001302:	bf5e      	ittt	pl
 8001304:	681a      	ldrpl	r2, [r3, #0]
 8001306:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800130a:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800130c:	68e3      	ldr	r3, [r4, #12]
 800130e:	b1cb      	cbz	r3, 8001344 <HAL_SPI_Receive+0xce>
    while(hspi->RxXferCount > 0U)
 8001310:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001312:	b29b      	uxth	r3, r3
 8001314:	b1d3      	cbz	r3, 800134c <HAL_SPI_Receive+0xd6>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	07d2      	lsls	r2, r2, #31
 800131c:	d53c      	bpl.n	8001398 <HAL_SPI_Receive+0x122>
        *((uint16_t*)pData) = hspi->Instance->DR;
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	f825 3b02 	strh.w	r3, [r5], #2
        hspi->RxXferCount--;
 8001324:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001326:	3b01      	subs	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800132c:	e7f0      	b.n	8001310 <HAL_SPI_Receive+0x9a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	07d0      	lsls	r0, r2, #31
 8001334:	d51f      	bpl.n	8001376 <HAL_SPI_Receive+0x100>
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 8001336:	7b1b      	ldrb	r3, [r3, #12]
 8001338:	f805 3b01 	strb.w	r3, [r5], #1
        hspi->RxXferCount--;
 800133c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800133e:	3b01      	subs	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while(hspi->RxXferCount > 0U)
 8001344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001346:	b29b      	uxth	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_SPI_Receive+0xb8>
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001352:	d10b      	bne.n	800136c <HAL_SPI_Receive+0xf6>
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800135a:	d002      	beq.n	8001362 <HAL_SPI_Receive+0xec>
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d104      	bne.n	800136c <HAL_SPI_Receive+0xf6>
    __HAL_SPI_DISABLE(hspi);
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800136a:	6013      	str	r3, [r2, #0]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800136c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800136e:	3000      	adds	r0, #0
 8001370:	bf18      	it	ne
 8001372:	2001      	movne	r0, #1
 8001374:	e001      	b.n	800137a <HAL_SPI_Receive+0x104>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001376:	b93e      	cbnz	r6, 8001388 <HAL_SPI_Receive+0x112>
          errorcode = HAL_TIMEOUT;
 8001378:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800137a:	2301      	movs	r3, #1
 800137c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001380:	2300      	movs	r3, #0
 8001382:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8001386:	e78a      	b.n	800129e <HAL_SPI_Receive+0x28>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001388:	1c71      	adds	r1, r6, #1
 800138a:	d0db      	beq.n	8001344 <HAL_SPI_Receive+0xce>
 800138c:	f7ff f94a 	bl	8000624 <HAL_GetTick>
 8001390:	1bc0      	subs	r0, r0, r7
 8001392:	4286      	cmp	r6, r0
 8001394:	d8d6      	bhi.n	8001344 <HAL_SPI_Receive+0xce>
 8001396:	e7ef      	b.n	8001378 <HAL_SPI_Receive+0x102>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001398:	2e00      	cmp	r6, #0
 800139a:	d0ed      	beq.n	8001378 <HAL_SPI_Receive+0x102>
 800139c:	1c73      	adds	r3, r6, #1
 800139e:	d0b7      	beq.n	8001310 <HAL_SPI_Receive+0x9a>
 80013a0:	f7ff f940 	bl	8000624 <HAL_GetTick>
 80013a4:	1bc0      	subs	r0, r0, r7
 80013a6:	4286      	cmp	r6, r0
 80013a8:	d8b2      	bhi.n	8001310 <HAL_SPI_Receive+0x9a>
 80013aa:	e7e5      	b.n	8001378 <HAL_SPI_Receive+0x102>
    errorcode = HAL_BUSY;
 80013ac:	2002      	movs	r0, #2
 80013ae:	e7e4      	b.n	800137a <HAL_SPI_Receive+0x104>
  __HAL_LOCK(hspi);
 80013b0:	2002      	movs	r0, #2
 80013b2:	e774      	b.n	800129e <HAL_SPI_Receive+0x28>

080013b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013c6:	2320      	movs	r3, #32
 80013c8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80013cc:	4770      	bx	lr
	...

080013d0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80013d4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013d6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80013d8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013da:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013e0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80013e2:	6133      	str	r3, [r6, #16]
{
 80013e4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013e6:	6883      	ldr	r3, [r0, #8]
 80013e8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80013ea:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ec:	4303      	orrs	r3, r0
 80013ee:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013f0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013f4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013f6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013fa:	430b      	orrs	r3, r1
 80013fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80013fe:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001400:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001402:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001408:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800140a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800140e:	6173      	str	r3, [r6, #20]
 8001410:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001412:	d17c      	bne.n	800150e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001414:	429e      	cmp	r6, r3
 8001416:	d003      	beq.n	8001420 <UART_SetConfig+0x50>
 8001418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800141c:	429e      	cmp	r6, r3
 800141e:	d144      	bne.n	80014aa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001420:	f7ff fce0 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001424:	2519      	movs	r5, #25
 8001426:	fb05 f300 	mul.w	r3, r5, r0
 800142a:	6860      	ldr	r0, [r4, #4]
 800142c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001430:	0040      	lsls	r0, r0, #1
 8001432:	fbb3 f3f0 	udiv	r3, r3, r0
 8001436:	fbb3 f3f9 	udiv	r3, r3, r9
 800143a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800143e:	f7ff fcd1 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	4368      	muls	r0, r5
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb0 f7f3 	udiv	r7, r0, r3
 800144c:	f7ff fcca 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	4368      	muls	r0, r5
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	fbb3 f3f9 	udiv	r3, r3, r9
 800145e:	fb09 7313 	mls	r3, r9, r3, r7
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	3332      	adds	r3, #50	; 0x32
 8001466:	fbb3 f3f9 	udiv	r3, r3, r9
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001470:	f7ff fcb8 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001474:	6862      	ldr	r2, [r4, #4]
 8001476:	4368      	muls	r0, r5
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	fbb0 faf2 	udiv	sl, r0, r2
 800147e:	f7ff fcb1 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001482:	6863      	ldr	r3, [r4, #4]
 8001484:	4368      	muls	r0, r5
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fbb0 f3f3 	udiv	r3, r0, r3
 800148c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001490:	fb09 a313 	mls	r3, r9, r3, sl
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	3332      	adds	r3, #50	; 0x32
 8001498:	fbb3 f3f9 	udiv	r3, r3, r9
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014a2:	443b      	add	r3, r7
 80014a4:	60b3      	str	r3, [r6, #8]
 80014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014aa:	f7ff fc8b 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80014ae:	2519      	movs	r5, #25
 80014b0:	fb05 f300 	mul.w	r3, r5, r0
 80014b4:	6860      	ldr	r0, [r4, #4]
 80014b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80014c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80014c8:	f7ff fc7c 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	4368      	muls	r0, r5
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fbb0 f7f3 	udiv	r7, r0, r3
 80014d6:	f7ff fc75 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	4368      	muls	r0, r5
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014e8:	fb09 7313 	mls	r3, r9, r3, r7
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	3332      	adds	r3, #50	; 0x32
 80014f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80014fa:	f7ff fc63 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	4368      	muls	r0, r5
 8001502:	0052      	lsls	r2, r2, #1
 8001504:	fbb0 faf2 	udiv	sl, r0, r2
 8001508:	f7ff fc5c 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 800150c:	e7b9      	b.n	8001482 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800150e:	429e      	cmp	r6, r3
 8001510:	d002      	beq.n	8001518 <UART_SetConfig+0x148>
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <UART_SetConfig+0x230>)
 8001514:	429e      	cmp	r6, r3
 8001516:	d140      	bne.n	800159a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001518:	f7ff fc64 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 800151c:	6867      	ldr	r7, [r4, #4]
 800151e:	2519      	movs	r5, #25
 8001520:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001524:	fb05 f300 	mul.w	r3, r5, r0
 8001528:	00bf      	lsls	r7, r7, #2
 800152a:	fbb3 f3f7 	udiv	r3, r3, r7
 800152e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001532:	011f      	lsls	r7, r3, #4
 8001534:	f7ff fc56 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001538:	6863      	ldr	r3, [r4, #4]
 800153a:	4368      	muls	r0, r5
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001542:	f7ff fc4f 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	4368      	muls	r0, r5
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001550:	fbb3 f3f9 	udiv	r3, r3, r9
 8001554:	fb09 8313 	mls	r3, r9, r3, r8
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	3332      	adds	r3, #50	; 0x32
 800155c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001560:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001564:	f7ff fc3e 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 8001568:	6862      	ldr	r2, [r4, #4]
 800156a:	4368      	muls	r0, r5
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	fbb0 faf2 	udiv	sl, r0, r2
 8001572:	f7ff fc37 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001576:	6863      	ldr	r3, [r4, #4]
 8001578:	4368      	muls	r0, r5
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001580:	fbb3 f3f9 	udiv	r3, r3, r9
 8001584:	fb09 a313 	mls	r3, r9, r3, sl
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	3332      	adds	r3, #50	; 0x32
 800158c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	ea43 0308 	orr.w	r3, r3, r8
 8001598:	e783      	b.n	80014a2 <UART_SetConfig+0xd2>
 800159a:	f7ff fc13 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 800159e:	6867      	ldr	r7, [r4, #4]
 80015a0:	2519      	movs	r5, #25
 80015a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015a6:	fb05 f300 	mul.w	r3, r5, r0
 80015aa:	00bf      	lsls	r7, r7, #2
 80015ac:	fbb3 f3f7 	udiv	r3, r3, r7
 80015b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b4:	011f      	lsls	r7, r3, #4
 80015b6:	f7ff fc05 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	4368      	muls	r0, r5
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	fbb0 f8f3 	udiv	r8, r0, r3
 80015c4:	f7ff fbfe 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	4368      	muls	r0, r5
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80015d6:	fb09 8313 	mls	r3, r9, r3, r8
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	3332      	adds	r3, #50	; 0x32
 80015de:	fbb3 f3f9 	udiv	r3, r3, r9
 80015e2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80015e6:	f7ff fbed 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	4368      	muls	r0, r5
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	fbb0 faf2 	udiv	sl, r0, r2
 80015f4:	f7ff fbe6 	bl	8000dc4 <HAL_RCC_GetPCLK1Freq>
 80015f8:	e7bd      	b.n	8001576 <UART_SetConfig+0x1a6>
 80015fa:	bf00      	nop
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400

08001604 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4617      	mov	r7, r2
 800160c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	680b      	ldr	r3, [r1, #0]
 8001612:	ea36 0303 	bics.w	r3, r6, r3
 8001616:	d101      	bne.n	800161c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
}
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800161c:	1c6b      	adds	r3, r5, #1
 800161e:	d0f7      	beq.n	8001610 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001620:	b995      	cbnz	r5, 8001648 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800162a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001634:	2320      	movs	r3, #32
 8001636:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800163a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800163e:	2300      	movs	r3, #0
 8001640:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001644:	2003      	movs	r0, #3
 8001646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001648:	f7fe ffec 	bl	8000624 <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	4285      	cmp	r5, r0
 8001650:	d2dd      	bcs.n	800160e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001652:	e7e6      	b.n	8001622 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001654 <HAL_UART_Init>:
{
 8001654:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001656:	4604      	mov	r4, r0
 8001658:	b340      	cbz	r0, 80016ac <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800165a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800165e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001662:	b91b      	cbnz	r3, 800166c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001664:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001668:	f000 fc6c 	bl	8001f44 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800166c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800166e:	2324      	movs	r3, #36	; 0x24
 8001670:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001674:	68d3      	ldr	r3, [r2, #12]
 8001676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fea7 	bl	80013d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800168a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001692:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800169a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800169e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80016a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80016a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80016aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	bd10      	pop	{r4, pc}

080016b0 <HAL_UART_Transmit>:
{
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80016b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016ba:	2b20      	cmp	r3, #32
{
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
 80016c0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80016c2:	d14f      	bne.n	8001764 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d04a      	beq.n	800175e <HAL_UART_Transmit+0xae>
 80016c8:	2a00      	cmp	r2, #0
 80016ca:	d048      	beq.n	800175e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80016cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d047      	beq.n	8001764 <HAL_UART_Transmit+0xb4>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016de:	2321      	movs	r3, #33	; 0x21
 80016e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016e4:	f7fe ff9e 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016e8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016ec:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80016f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b96b      	cbnz	r3, 8001714 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4632      	mov	r2, r6
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ff80 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001704:	b9b0      	cbnz	r0, 8001734 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001706:	2320      	movs	r3, #32
 8001708:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800170c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001714:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001716:	3b01      	subs	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001722:	4632      	mov	r2, r6
 8001724:	463b      	mov	r3, r7
 8001726:	f04f 0180 	mov.w	r1, #128	; 0x80
 800172a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800172c:	d10e      	bne.n	800174c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800172e:	f7ff ff69 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001732:	b110      	cbz	r0, 800173a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800173a:	882b      	ldrh	r3, [r5, #0]
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001742:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001744:	6923      	ldr	r3, [r4, #16]
 8001746:	b943      	cbnz	r3, 800175a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001748:	3502      	adds	r5, #2
 800174a:	e7d2      	b.n	80016f2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800174c:	f7ff ff5a 	bl	8001604 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001750:	2800      	cmp	r0, #0
 8001752:	d1ef      	bne.n	8001734 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	782a      	ldrb	r2, [r5, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	3501      	adds	r5, #1
 800175c:	e7c9      	b.n	80016f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800175e:	2001      	movs	r0, #1
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001764:	2002      	movs	r0, #2
}
 8001766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800176a <HAL_UART_TxCpltCallback>:
 800176a:	4770      	bx	lr

0800176c <HAL_UART_RxCpltCallback>:
 800176c:	4770      	bx	lr

0800176e <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800176e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001772:	2b22      	cmp	r3, #34	; 0x22
{
 8001774:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001776:	d132      	bne.n	80017de <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001778:	6883      	ldr	r3, [r0, #8]
 800177a:	6901      	ldr	r1, [r0, #16]
 800177c:	6802      	ldr	r2, [r0, #0]
 800177e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001782:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001784:	d11f      	bne.n	80017c6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001786:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001788:	b9c9      	cbnz	r1, 80017be <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800178a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800178e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001792:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001794:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001796:	3c01      	subs	r4, #1
 8001798:	b2a4      	uxth	r4, r4
 800179a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800179c:	b96c      	cbnz	r4, 80017ba <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800179e:	6803      	ldr	r3, [r0, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80017a6:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80017b0:	2320      	movs	r3, #32
 80017b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80017b6:	f7ff ffd9 	bl	800176c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80017ba:	2000      	movs	r0, #0
}
 80017bc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f823 2b01 	strh.w	r2, [r3], #1
 80017c4:	e7e5      	b.n	8001792 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017c6:	b921      	cbnz	r1, 80017d2 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017c8:	1c59      	adds	r1, r3, #1
 80017ca:	6852      	ldr	r2, [r2, #4]
 80017cc:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e7e0      	b.n	8001794 <UART_Receive_IT+0x26>
 80017d2:	6852      	ldr	r2, [r2, #4]
 80017d4:	1c59      	adds	r1, r3, #1
 80017d6:	6281      	str	r1, [r0, #40]	; 0x28
 80017d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017dc:	e7f7      	b.n	80017ce <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80017de:	2002      	movs	r0, #2
 80017e0:	bd10      	pop	{r4, pc}

080017e2 <HAL_UART_ErrorCallback>:
 80017e2:	4770      	bx	lr

080017e4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017e4:	6803      	ldr	r3, [r0, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017e8:	68d9      	ldr	r1, [r3, #12]
{
 80017ea:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80017ec:	0716      	lsls	r6, r2, #28
{
 80017ee:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017f0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80017f2:	d107      	bne.n	8001804 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017f4:	0696      	lsls	r6, r2, #26
 80017f6:	d55a      	bpl.n	80018ae <HAL_UART_IRQHandler+0xca>
 80017f8:	068d      	lsls	r5, r1, #26
 80017fa:	d558      	bpl.n	80018ae <HAL_UART_IRQHandler+0xca>
}
 80017fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001800:	f7ff bfb5 	b.w	800176e <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001804:	f015 0501 	ands.w	r5, r5, #1
 8001808:	d102      	bne.n	8001810 <HAL_UART_IRQHandler+0x2c>
 800180a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800180e:	d04e      	beq.n	80018ae <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001810:	07d3      	lsls	r3, r2, #31
 8001812:	d505      	bpl.n	8001820 <HAL_UART_IRQHandler+0x3c>
 8001814:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001816:	bf42      	ittt	mi
 8001818:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800181a:	f043 0301 	orrmi.w	r3, r3, #1
 800181e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001820:	0750      	lsls	r0, r2, #29
 8001822:	d504      	bpl.n	800182e <HAL_UART_IRQHandler+0x4a>
 8001824:	b11d      	cbz	r5, 800182e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800182e:	0793      	lsls	r3, r2, #30
 8001830:	d504      	bpl.n	800183c <HAL_UART_IRQHandler+0x58>
 8001832:	b11d      	cbz	r5, 800183c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800183c:	0716      	lsls	r6, r2, #28
 800183e:	d504      	bpl.n	800184a <HAL_UART_IRQHandler+0x66>
 8001840:	b11d      	cbz	r5, 800184a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800184a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d066      	beq.n	800191e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001850:	0695      	lsls	r5, r2, #26
 8001852:	d504      	bpl.n	800185e <HAL_UART_IRQHandler+0x7a>
 8001854:	0688      	lsls	r0, r1, #26
 8001856:	d502      	bpl.n	800185e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff ff88 	bl	800176e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001862:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001864:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001866:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001868:	d402      	bmi.n	8001870 <HAL_UART_IRQHandler+0x8c>
 800186a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800186e:	d01a      	beq.n	80018a6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001870:	f7ff fda0 	bl	80013b4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	0652      	lsls	r2, r2, #25
 800187a:	d510      	bpl.n	800189e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800187c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800187e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001884:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001886:	b150      	cbz	r0, 800189e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_UART_IRQHandler+0x13c>)
 800188a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800188c:	f7fe ff4c 	bl	8000728 <HAL_DMA_Abort_IT>
 8001890:	2800      	cmp	r0, #0
 8001892:	d044      	beq.n	800191e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001894:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800189a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800189c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ff9f 	bl	80017e2 <HAL_UART_ErrorCallback>
 80018a4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80018a6:	f7ff ff9c 	bl	80017e2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018aa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018ae:	0616      	lsls	r6, r2, #24
 80018b0:	d527      	bpl.n	8001902 <HAL_UART_IRQHandler+0x11e>
 80018b2:	060d      	lsls	r5, r1, #24
 80018b4:	d525      	bpl.n	8001902 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80018b6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80018ba:	2a21      	cmp	r2, #33	; 0x21
 80018bc:	d12f      	bne.n	800191e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018be:	68a2      	ldr	r2, [r4, #8]
 80018c0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018c4:	6a22      	ldr	r2, [r4, #32]
 80018c6:	d117      	bne.n	80018f8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018c8:	8811      	ldrh	r1, [r2, #0]
 80018ca:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018ce:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80018d0:	6921      	ldr	r1, [r4, #16]
 80018d2:	b979      	cbnz	r1, 80018f4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80018d4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80018d6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80018d8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018da:	3a01      	subs	r2, #1
 80018dc:	b292      	uxth	r2, r2
 80018de:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018e0:	b9ea      	cbnz	r2, 800191e <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80018f4:	3201      	adds	r2, #1
 80018f6:	e7ee      	b.n	80018d6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80018f8:	1c51      	adds	r1, r2, #1
 80018fa:	6221      	str	r1, [r4, #32]
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	e7ea      	b.n	80018d8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001902:	0650      	lsls	r0, r2, #25
 8001904:	d50b      	bpl.n	800191e <HAL_UART_IRQHandler+0x13a>
 8001906:	064a      	lsls	r2, r1, #25
 8001908:	d509      	bpl.n	800191e <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001910:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001912:	2320      	movs	r3, #32
 8001914:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff26 	bl	800176a <HAL_UART_TxCpltCallback>
 800191e:	bd70      	pop	{r4, r5, r6, pc}
 8001920:	08001925 	.word	0x08001925

08001924 <UART_DMAAbortOnError>:
{
 8001924:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001926:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800192c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800192e:	f7ff ff58 	bl	80017e2 <HAL_UART_ErrorCallback>
 8001932:	bd08      	pop	{r3, pc}

08001934 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8001934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t spiReg = reg;
 8001938:	ac02      	add	r4, sp, #8
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800193a:	4d0f      	ldr	r5, [pc, #60]	; (8001978 <LIS3DSH_WriteIO+0x44>)
	uint8_t spiReg = reg;
 800193c:	f804 0d01 	strb.w	r0, [r4, #-1]!
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8001940:	4e0e      	ldr	r6, [pc, #56]	; (800197c <LIS3DSH_WriteIO+0x48>)
{
 8001942:	460f      	mov	r7, r1
 8001944:	4690      	mov	r8, r2
	_LIS3DHS_CS_ENBALE;
 8001946:	4628      	mov	r0, r5
 8001948:	2200      	movs	r2, #0
 800194a:	2108      	movs	r1, #8
 800194c:	f7fe ffde 	bl	800090c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8001950:	4621      	mov	r1, r4
 8001952:	230a      	movs	r3, #10
 8001954:	2201      	movs	r2, #1
 8001956:	4630      	mov	r0, r6
 8001958:	f7ff fae8 	bl	8000f2c <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 800195c:	230a      	movs	r3, #10
 800195e:	4642      	mov	r2, r8
 8001960:	4639      	mov	r1, r7
 8001962:	4630      	mov	r0, r6
 8001964:	f7ff fae2 	bl	8000f2c <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001968:	2201      	movs	r2, #1
 800196a:	2108      	movs	r1, #8
 800196c:	4628      	mov	r0, r5
 800196e:	f7fe ffcd 	bl	800090c <HAL_GPIO_WritePin>
}
 8001972:	b002      	add	sp, #8
 8001974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	200000a8 	.word	0x200000a8

08001980 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001980:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001982:	ad02      	add	r5, sp, #8
 8001984:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8001988:	f805 0d04 	strb.w	r0, [r5, #-4]!
{
 800198c:	4614      	mov	r4, r2
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800198e:	4813      	ldr	r0, [pc, #76]	; (80019dc <LIS3DSH_ReadIO+0x5c>)
 8001990:	2200      	movs	r2, #0
{
 8001992:	460e      	mov	r6, r1
	_LIS3DHS_CS_ENBALE;
 8001994:	2108      	movs	r1, #8
 8001996:	f7fe ffb9 	bl	800090c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 800199a:	230a      	movs	r3, #10
 800199c:	2201      	movs	r2, #1
 800199e:	4629      	mov	r1, r5
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <LIS3DSH_ReadIO+0x60>)
 80019a2:	f7ff fac3 	bl	8000f2c <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 80019a6:	230a      	movs	r3, #10
 80019a8:	4622      	mov	r2, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <LIS3DSH_ReadIO+0x60>)
 80019ae:	f7ff fc62 	bl	8001276 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80019b2:	2201      	movs	r2, #1
 80019b4:	2108      	movs	r1, #8
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <LIS3DSH_ReadIO+0x5c>)
 80019b8:	f7fe ffa8 	bl	800090c <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 80019bc:	f004 0403 	and.w	r4, r4, #3
 80019c0:	2300      	movs	r3, #0
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	42a2      	cmp	r2, r4
 80019c6:	f103 0301 	add.w	r3, r3, #1
 80019ca:	db01      	blt.n	80019d0 <LIS3DSH_ReadIO+0x50>
	{
		dataR[i] = spiBuf[i];
	}
}
 80019cc:	b002      	add	sp, #8
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
		dataR[i] = spiBuf[i];
 80019d0:	a902      	add	r1, sp, #8
 80019d2:	4411      	add	r1, r2
 80019d4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 80019d8:	54b1      	strb	r1, [r6, r2]
 80019da:	e7f2      	b.n	80019c2 <LIS3DSH_ReadIO+0x42>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	200000a8 	.word	0x200000a8

080019e4 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 80019e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019e6:	460c      	mov	r4, r1
	uint8_t spiData = 0;
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80019e8:	2258      	movs	r2, #88	; 0x58
 80019ea:	4601      	mov	r1, r0
 80019ec:	4823      	ldr	r0, [pc, #140]	; (8001a7c <LIS3DSH_Init+0x98>)
 80019ee:	f000 fbab 	bl	8002148 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80019f2:	78e3      	ldrb	r3, [r4, #3]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80019f4:	7822      	ldrb	r2, [r4, #0]
 80019f6:	ad02      	add	r5, sp, #8
 80019f8:	f022 020f 	bic.w	r2, r2, #15
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80019fc:	f003 0307 	and.w	r3, r3, #7
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8001a00:	4313      	orrs	r3, r2
 8001a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8001a06:	2201      	movs	r2, #1
 8001a08:	4629      	mov	r1, r5
 8001a0a:	2020      	movs	r0, #32
 8001a0c:	f7ff ff92 	bl	8001934 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8001a10:	78a3      	ldrb	r3, [r4, #2]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001a12:	7862      	ldrb	r2, [r4, #1]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001a18:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001a1c:	4313      	orrs	r3, r2
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001a1e:	4629      	mov	r1, r5
 8001a20:	2201      	movs	r2, #1
 8001a22:	2024      	movs	r0, #36	; 0x24
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001a24:	f88d 3007 	strb.w	r3, [sp, #7]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001a28:	f7ff ff84 	bl	8001934 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001a2c:	7923      	ldrb	r3, [r4, #4]
 8001a2e:	b13b      	cbz	r3, 8001a40 <LIS3DSH_Init+0x5c>
	{
		spiData = 0x88;
 8001a30:	2388      	movs	r3, #136	; 0x88
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4629      	mov	r1, r5
 8001a36:	2023      	movs	r0, #35	; 0x23
		spiData = 0x88;
 8001a38:	f88d 3007 	strb.w	r3, [sp, #7]
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001a3c:	f7ff ff7a 	bl	8001934 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001a40:	7863      	ldrb	r3, [r4, #1]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d016      	beq.n	8001a74 <LIS3DSH_Init+0x90>
 8001a46:	d809      	bhi.n	8001a5c <LIS3DSH_Init+0x78>
 8001a48:	b173      	cbz	r3, 8001a68 <LIS3DSH_Init+0x84>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d010      	beq.n	8001a70 <LIS3DSH_Init+0x8c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
			break;
	}
	_LIS3DHS_CS_DISABLE;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2108      	movs	r1, #8
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <LIS3DSH_Init+0x9c>)
 8001a54:	f7fe ff5a 	bl	800090c <HAL_GPIO_WritePin>
}
 8001a58:	b003      	add	sp, #12
 8001a5a:	bd30      	pop	{r4, r5, pc}
	switch(accInitDef->fullScale)
 8001a5c:	2b18      	cmp	r3, #24
 8001a5e:	d00b      	beq.n	8001a78 <LIS3DSH_Init+0x94>
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d1f4      	bne.n	8001a4e <LIS3DSH_Init+0x6a>
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <LIS3DSH_Init+0xa0>)
 8001a66:	e000      	b.n	8001a6a <LIS3DSH_Init+0x86>
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <LIS3DSH_Init+0xa4>)
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <LIS3DSH_Init+0xa8>)
 8001a6c:	601a      	str	r2, [r3, #0]
			break;
 8001a6e:	e7ee      	b.n	8001a4e <LIS3DSH_Init+0x6a>
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <LIS3DSH_Init+0xac>)
 8001a72:	e7fa      	b.n	8001a6a <LIS3DSH_Init+0x86>
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <LIS3DSH_Init+0xb0>)
 8001a76:	e7f8      	b.n	8001a6a <LIS3DSH_Init+0x86>
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <LIS3DSH_Init+0xb4>)
 8001a7a:	e7f6      	b.n	8001a6a <LIS3DSH_Init+0x86>
 8001a7c:	200000a8 	.word	0x200000a8
 8001a80:	40021000 	.word	0x40021000
 8001a84:	3f3ae148 	.word	0x3f3ae148
 8001a88:	3d75c28f 	.word	0x3d75c28f
 8001a8c:	20000014 	.word	0x20000014
 8001a90:	3df5c28f 	.word	0x3df5c28f
 8001a94:	3e3851ec 	.word	0x3e3851ec
 8001a98:	3e75c28f 	.word	0x3e75c28f

08001a9c <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001a9e:	2202      	movs	r2, #2
{
 8001aa0:	4606      	mov	r6, r0
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001aa2:	a901      	add	r1, sp, #4
 8001aa4:	2028      	movs	r0, #40	; 0x28
 8001aa6:	f7ff ff6b 	bl	8001980 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001aaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001aae:	f89d 5004 	ldrb.w	r5, [sp, #4]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8001ab2:	a901      	add	r1, sp, #4
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	202a      	movs	r0, #42	; 0x2a
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ab8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8001abc:	f7ff ff60 	bl	8001980 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ac0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001ac4:	f89d 4004 	ldrb.w	r4, [sp, #4]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001ac8:	2202      	movs	r2, #2
 8001aca:	a901      	add	r1, sp, #4
 8001acc:	202c      	movs	r0, #44	; 0x2c
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ace:	eb04 2403 	add.w	r4, r4, r3, lsl #8
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001ad2:	f7ff ff55 	bl	8001980 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001ada:	f89d 3004 	ldrb.w	r3, [sp, #4]
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ade:	b22d      	sxth	r5, r5
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ae0:	b224      	sxth	r4, r4
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001ae2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	
	return tempDataRaw;
	
}
 8001ae6:	4630      	mov	r0, r6
	return tempDataRaw;
 8001ae8:	8035      	strh	r5, [r6, #0]
 8001aea:	8074      	strh	r4, [r6, #2]
 8001aec:	80b3      	strh	r3, [r6, #4]
}
 8001aee:	b002      	add	sp, #8
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001af4 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001af4:	b500      	push	{lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001af8:	a805      	add	r0, sp, #20
 8001afa:	f7ff ffcf 	bl	8001a9c <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <LIS3DSH_GetDataScaled+0x90>)
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001b00:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001b88 <LIS3DSH_GetDataScaled+0x94>
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001b04:	edd3 6a00 	vldr	s13, [r3]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001b08:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8001b0c:	ee07 3a10 	vmov	s14, r3
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <LIS3DSH_GetDataScaled+0x98>)
 8001b12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <LIS3DSH_GetDataScaled+0x9c>)
 8001b1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b20:	ed93 6a00 	vldr	s12, [r3]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001b24:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 8001b28:	eef0 0a40 	vmov.f32	s1, s0
 8001b2c:	eee7 0a27 	vfma.f32	s1, s14, s15
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001b30:	ee07 3a10 	vmov	s14, r3
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <LIS3DSH_GetDataScaled+0xa0>)
 8001b36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <LIS3DSH_GetDataScaled+0xa4>)
 8001b40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b44:	eeb0 1a40 	vmov.f32	s2, s0
 8001b48:	eea7 1a27 	vfma.f32	s2, s14, s15
 8001b4c:	ed93 7a00 	vldr	s14, [r3]
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001b50:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <LIS3DSH_GetDataScaled+0xa8>)
 8001b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	
	return tempScaledData;
}
 8001b5e:	ee70 0ac6 	vsub.f32	s1, s1, s12
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b66:	edd3 6a00 	vldr	s13, [r3]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <LIS3DSH_GetDataScaled+0xac>)
 8001b6c:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8001b70:	edd3 7a00 	vldr	s15, [r3]
}
 8001b74:	ee31 1a47 	vsub.f32	s2, s2, s14
 8001b78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001b7c:	b00b      	add	sp, #44	; 0x2c
 8001b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b82:	bf00      	nop
 8001b84:	20000014 	.word	0x20000014
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	200000a0 	.word	0x200000a0
 8001b94:	20000010 	.word	0x20000010
 8001b98:	200000a4 	.word	0x200000a4
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	2000009c 	.word	0x2000009c

08001ba4 <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 8001ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ba6:	4604      	mov	r4, r0
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 8001ba8:	f7fe fd3c 	bl	8000624 <HAL_GetTick>
 8001bac:	4605      	mov	r5, r0
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f10d 0107 	add.w	r1, sp, #7
 8001bb4:	2027      	movs	r0, #39	; 0x27
 8001bb6:	f7ff fee3 	bl	8001980 <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 8001bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bbe:	075b      	lsls	r3, r3, #29
 8001bc0:	d104      	bne.n	8001bcc <LIS3DSH_PollDRDY+0x28>
		
	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 8001bc2:	f7fe fd2f 	bl	8000624 <HAL_GetTick>
 8001bc6:	1b40      	subs	r0, r0, r5
 8001bc8:	42a0      	cmp	r0, r4
 8001bca:	d3f0      	bcc.n	8001bae <LIS3DSH_PollDRDY+0xa>
	if(Acc_status & 0x07)
 8001bcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001bd0:	f010 0007 	ands.w	r0, r0, #7
 8001bd4:	bf18      	it	ne
 8001bd6:	2001      	movne	r0, #1
	{
		return true;
	}
	return false;
	
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	bd30      	pop	{r4, r5, pc}

08001bdc <SystemClock_Config>:



  */
void SystemClock_Config(void)
{
 8001bdc:	b530      	push	{r4, r5, lr}
 8001bde:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be0:	2230      	movs	r2, #48	; 0x30
 8001be2:	2100      	movs	r1, #0
 8001be4:	a808      	add	r0, sp, #32
 8001be6:	f000 faba 	bl	800215e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bea:	2100      	movs	r1, #0
 8001bec:	2214      	movs	r2, #20
 8001bee:	a803      	add	r0, sp, #12
 8001bf0:	f000 fab5 	bl	800215e <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	2400      	movs	r4, #0
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <SystemClock_Config+0x8c>)
 8001bf8:	9401      	str	r4, [sp, #4]
 8001bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <SystemClock_Config+0x90>)
 8001c0e:	9402      	str	r4, [sp, #8]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c1a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001c30:	2332      	movs	r3, #50	; 0x32
 8001c32:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c34:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c36:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c38:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c40:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f7fe fe74 	bl	8000930 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c48:	230f      	movs	r3, #15
 8001c4a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c50:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c52:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c58:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c5e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c60:	f7ff f816 	bl	8000c90 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c64:	b015      	add	sp, #84	; 0x54
 8001c66:	bd30      	pop	{r4, r5, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40007000 	.word	0x40007000

08001c70 <main>:
{
 8001c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c74:	ed2d 8b02 	vpush	{d8}
 8001c78:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8001c7a:	f7fe fcad 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 8001c7e:	f7ff ffad 	bl	8001bdc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	2214      	movs	r2, #20
 8001c84:	2100      	movs	r1, #0
 8001c86:	a80b      	add	r0, sp, #44	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c88:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f000 fa68 	bl	800215e <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <main+0x1f0>)
 8001c90:	9401      	str	r4, [sp, #4]
 8001c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c94:	4873      	ldr	r0, [pc, #460]	; (8001e64 <main+0x1f4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c96:	f042 0210 	orr.w	r2, r2, #16
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9e:	f002 0210 	and.w	r2, r2, #16
 8001ca2:	9201      	str	r2, [sp, #4]
 8001ca4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	9402      	str	r4, [sp, #8]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb2:	f002 0201 	and.w	r2, r2, #1
 8001cb6:	9202      	str	r2, [sp, #8]
 8001cb8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	9403      	str	r4, [sp, #12]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	f042 0202 	orr.w	r2, r2, #2
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	f002 0202 	and.w	r2, r2, #2
 8001cca:	9203      	str	r2, [sp, #12]
 8001ccc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	9404      	str	r4, [sp, #16]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001ce6:	f7fe fe11 	bl	800090c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cea:	4622      	mov	r2, r4
 8001cec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001cf0:	485d      	ldr	r0, [pc, #372]	; (8001e68 <main+0x1f8>)
 8001cf2:	f7fe fe0b 	bl	800090c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_Pin;
 8001cf8:	2608      	movs	r6, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	a90b      	add	r1, sp, #44	; 0x2c
 8001cfc:	4859      	ldr	r0, [pc, #356]	; (8001e64 <main+0x1f4>)
  GPIO_InitStruct.Pin = CS_Pin;
 8001cfe:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f7fe fd21 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8001d0c:	4857      	ldr	r0, [pc, #348]	; (8001e6c <main+0x1fc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d0e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f7fe fd1a 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d18:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1c:	a90b      	add	r1, sp, #44	; 0x2c
 8001d1e:	4852      	ldr	r0, [pc, #328]	; (8001e68 <main+0x1f8>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d20:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d28:	f7fe fd10 	bl	800074c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <main+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2e:	484d      	ldr	r0, [pc, #308]	; (8001e64 <main+0x1f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d30:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d32:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d34:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d38:	f7fe fd08 	bl	800074c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4622      	mov	r2, r4
 8001d40:	2006      	movs	r0, #6
 8001d42:	f7fe fc9b 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f7fe fccc 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8001d4c:	4d49      	ldr	r5, [pc, #292]	; (8001e74 <main+0x204>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	; (8001e78 <main+0x208>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d50:	60ac      	str	r4, [r5, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d52:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d56:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5e:	61ab      	str	r3, [r5, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d60:	2310      	movs	r3, #16
 8001d62:	61eb      	str	r3, [r5, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d64:	4628      	mov	r0, r5
  hspi1.Init.CRCPolynomial = 10;
 8001d66:	230a      	movs	r3, #10
 8001d68:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6a:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6c:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d6e:	616c      	str	r4, [r5, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d70:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d72:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d74:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d76:	f7ff f89c 	bl	8000eb2 <HAL_SPI_Init>
  huart2.Instance = USART2;
 8001d7a:	4840      	ldr	r0, [pc, #256]	; (8001e7c <main+0x20c>)
  huart2.Init.BaudRate = 115200;
 8001d7c:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <main+0x210>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	6084      	str	r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	270c      	movs	r7, #12
  huart2.Init.BaudRate = 115200;
 8001d82:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
 8001d86:	e880 0108 	stmia.w	r0, {r3, r8}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8a:	6147      	str	r7, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d8e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d90:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d92:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d94:	f7ff fc5e 	bl	8001654 <HAL_UART_Init>
  huart3.Instance = USART3;
 8001d98:	483a      	ldr	r0, [pc, #232]	; (8001e84 <main+0x214>)
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <main+0x218>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	6147      	str	r7, [r0, #20]
  huart3.Init.BaudRate = 115200;
 8001d9e:	e880 0108 	stmia.w	r0, {r3, r8}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da4:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001da6:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da8:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001daa:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dac:	f7ff fc52 	bl	8001654 <HAL_UART_Init>
  MyAccConfDeff.dataRate = LIS3DSH_DATARATE_12_5;
 8001db0:	2330      	movs	r3, #48	; 0x30
 8001db2:	f88d 3014 	strb.w	r3, [sp, #20]
  MyAccConfDeff.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001db6:	23c0      	movs	r3, #192	; 0xc0
 8001db8:	f88d 3016 	strb.w	r3, [sp, #22]
  LIS3DSH_Init(&hspi1, &MyAccConfDeff);
 8001dbc:	4628      	mov	r0, r5
  MyAccConfDeff.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001dbe:	2307      	movs	r3, #7
  LIS3DSH_Init(&hspi1, &MyAccConfDeff);
 8001dc0:	a905      	add	r1, sp, #20
  MyAccConfDeff.fullScale = LIS3DSH_FULLSCALE_4;
 8001dc2:	f88d 6015 	strb.w	r6, [sp, #21]
  MyAccConfDeff.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001dc6:	f88d 3017 	strb.w	r3, [sp, #23]
  MyAccConfDeff.interruptEnable = false;
 8001dca:	f88d 4018 	strb.w	r4, [sp, #24]
  LIS3DSH_Init(&hspi1, &MyAccConfDeff);
 8001dce:	f7ff fe09 	bl	80019e4 <LIS3DSH_Init>
	 		 myData = LIS3DSH_GetDataScaled();			//mesure
 8001dd2:	4d2e      	ldr	r5, [pc, #184]	; (8001e8c <main+0x21c>)
	 		sprintf(DataX,"%d",datax);	//convert data int-string
 8001dd4:	4e2e      	ldr	r6, [pc, #184]	; (8001e90 <main+0x220>)
	 		strcat(DataX, "\n");
 8001dd6:	4f2f      	ldr	r7, [pc, #188]	; (8001e94 <main+0x224>)
	  if(LIS3DSH_PollDRDY(1000) == true ){			//condition for initialize mesure
 8001dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ddc:	f7ff fee2 	bl	8001ba4 <LIS3DSH_PollDRDY>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d0f9      	beq.n	8001dd8 <main+0x168>
	 		 myData = LIS3DSH_GetDataScaled();			//mesure
 8001de4:	f7ff fe86 	bl	8001af4 <LIS3DSH_GetDataScaled>
	 		sprintf(DataX,"%d",datax);	//convert data int-string
 8001de8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	 		datay=(int)myData.y;
 8001dec:	eebd 8ae0 	vcvt.s32.f32	s16, s1
	 		sprintf(DataX,"%d",datax);	//convert data int-string
 8001df0:	ee17 2a90 	vmov	r2, s15
 8001df4:	4631      	mov	r1, r6
 8001df6:	a807      	add	r0, sp, #28
	 		 myData = LIS3DSH_GetDataScaled();			//mesure
 8001df8:	ed85 0a00 	vstr	s0, [r5]
 8001dfc:	edc5 0a01 	vstr	s1, [r5, #4]
 8001e00:	ed85 1a02 	vstr	s2, [r5, #8]
	 		sprintf(DataX,"%d",datax);	//convert data int-string
 8001e04:	f000 f9b4 	bl	8002170 <siprintf>
	 		sprintf(DataY,"%d",datay);
 8001e08:	ee18 2a10 	vmov	r2, s16
 8001e0c:	4631      	mov	r1, r6
 8001e0e:	a80b      	add	r0, sp, #44	; 0x2c
 8001e10:	f000 f9ae 	bl	8002170 <siprintf>
	 		strcat(DataX, "\n");
 8001e14:	4639      	mov	r1, r7
 8001e16:	a807      	add	r0, sp, #28
 8001e18:	f000 f9ce 	bl	80021b8 <strcat>
	 		strcat(DataY, "\n");
 8001e1c:	4639      	mov	r1, r7
 8001e1e:	a80b      	add	r0, sp, #44	; 0x2c
 8001e20:	f000 f9ca 	bl	80021b8 <strcat>
	 	  if (a==b) {
 8001e24:	b96c      	cbnz	r4, 8001e42 <main+0x1d2>
	 		  HAL_UART_Transmit(&huart3, (uint8_t *)DataY, strlen(DataY), 5);
 8001e26:	a80b      	add	r0, sp, #44	; 0x2c
 8001e28:	f7fe f9d2 	bl	80001d0 <strlen>
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	b282      	uxth	r2, r0
 8001e30:	a90b      	add	r1, sp, #44	; 0x2c
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <main+0x214>)
 8001e34:	f7ff fc3c 	bl	80016b0 <HAL_UART_Transmit>
	 		  	  HAL_Delay(10);
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f7fe fbf9 	bl	8000630 <HAL_Delay>
	 		  	  a=a+1;
 8001e3e:	2401      	movs	r4, #1
 8001e40:	e7ca      	b.n	8001dd8 <main+0x168>
	 		HAL_UART_Transmit(&huart2, (uint8_t *)DataX, strlen(DataX), 5);
 8001e42:	a807      	add	r0, sp, #28
 8001e44:	f7fe f9c4 	bl	80001d0 <strlen>
 8001e48:	2305      	movs	r3, #5
 8001e4a:	b282      	uxth	r2, r0
 8001e4c:	a907      	add	r1, sp, #28
 8001e4e:	480b      	ldr	r0, [pc, #44]	; (8001e7c <main+0x20c>)
 8001e50:	f7ff fc2e 	bl	80016b0 <HAL_UART_Transmit>
	 		HAL_Delay(10);
 8001e54:	200a      	movs	r0, #10
 8001e56:	f7fe fbeb 	bl	8000630 <HAL_Delay>
	 		  a=0;
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	e7bc      	b.n	8001dd8 <main+0x168>
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	10110000 	.word	0x10110000
 8001e74:	2000015c 	.word	0x2000015c
 8001e78:	40013000 	.word	0x40013000
 8001e7c:	200001b4 	.word	0x200001b4
 8001e80:	40004400 	.word	0x40004400
 8001e84:	20000110 	.word	0x20000110
 8001e88:	40004800 	.word	0x40004800
 8001e8c:	20000150 	.word	0x20000150
 8001e90:	080029e4 	.word	0x080029e4
 8001e94:	080029e7 	.word	0x080029e7

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_MspInit+0x3c>)
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	9100      	str	r1, [sp, #0]
 8001ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eaa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001eae:	9200      	str	r2, [sp, #0]
 8001eb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	9101      	str	r1, [sp, #4]
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec8:	f7fe fbc6 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ecc:	b003      	add	sp, #12
 8001ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4604      	mov	r4, r0
 8001edc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	2214      	movs	r2, #20
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	a803      	add	r0, sp, #12
 8001ee4:	f000 f93b 	bl	800215e <memset>
  if(hspi->Instance==SPI1)
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_SPI_MspInit+0x64>)
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d122      	bne.n	8001f36 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	9101      	str	r1, [sp, #4]
 8001ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	4811      	ldr	r0, [pc, #68]	; (8001f40 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f00:	645a      	str	r2, [r3, #68]	; 0x44
 8001f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f08:	9201      	str	r2, [sp, #4]
 8001f0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	9102      	str	r1, [sp, #8]
 8001f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f20:	23e0      	movs	r3, #224	; 0xe0
 8001f22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f2e:	2305      	movs	r3, #5
 8001f30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f7fe fc0b 	bl	800074c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f36:	b008      	add	sp, #32
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40013000 	.word	0x40013000
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	2214      	movs	r2, #20
{
 8001f48:	b08a      	sub	sp, #40	; 0x28
 8001f4a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	eb0d 0002 	add.w	r0, sp, r2
 8001f52:	f000 f904 	bl	800215e <memset>
  if(huart->Instance==USART2)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_UART_MspInit+0xd4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12d      	bne.n	8001fba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_UART_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	482f      	ldr	r0, [pc, #188]	; (8002020 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2400      	movs	r4, #0
 8001f64:	9401      	str	r4, [sp, #4]
 8001f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	9402      	str	r4, [sp, #8]
 8001f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f7fe fbd3 	bl	800074c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa6:	2026      	movs	r0, #38	; 0x26
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4621      	mov	r1, r4
 8001fac:	f7fe fb66 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb0:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fb2:	f7fe fb97 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb6:	b00a      	add	sp, #40	; 0x28
 8001fb8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_UART_MspInit+0xe0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d1fa      	bne.n	8001fb6 <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc4:	2400      	movs	r4, #0
 8001fc6:	9403      	str	r4, [sp, #12]
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001fd6:	9203      	str	r2, [sp, #12]
 8001fd8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	9404      	str	r4, [sp, #16]
 8001fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fde:	f042 0202 	orr.w	r2, r2, #2
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	9304      	str	r3, [sp, #16]
 8001fec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ff2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002002:	2307      	movs	r3, #7
 8002004:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	f7fe fba1 	bl	800074c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800200a:	2027      	movs	r0, #39	; 0x27
 800200c:	4622      	mov	r2, r4
 800200e:	4621      	mov	r1, r4
 8002010:	f7fe fb34 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002014:	2027      	movs	r0, #39	; 0x27
 8002016:	e7cc      	b.n	8001fb2 <HAL_UART_MspInit+0x6e>
 8002018:	40004400 	.word	0x40004400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000
 8002024:	40004800 	.word	0x40004800
 8002028:	40020400 	.word	0x40020400

0800202c <NMI_Handler>:
 800202c:	4770      	bx	lr

0800202e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202e:	e7fe      	b.n	800202e <HardFault_Handler>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	e7fe      	b.n	8002032 <BusFault_Handler>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	e7fe      	b.n	8002034 <UsageFault_Handler>

08002036 <SVC_Handler>:
 8002036:	4770      	bx	lr

08002038 <DebugMon_Handler>:
 8002038:	4770      	bx	lr

0800203a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203a:	4770      	bx	lr

0800203c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f7fe bae6 	b.w	800060c <HAL_IncTick>

08002040 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe bc69 	b.w	8000918 <HAL_GPIO_EXTI_IRQHandler>
	...

08002048 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <USART2_IRQHandler+0x8>)
 800204a:	f7ff bbcb 	b.w	80017e4 <HAL_UART_IRQHandler>
 800204e:	bf00      	nop
 8002050:	200001b4 	.word	0x200001b4

08002054 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002054:	4801      	ldr	r0, [pc, #4]	; (800205c <USART3_IRQHandler+0x8>)
 8002056:	f7ff bbc5 	b.w	80017e4 <HAL_UART_IRQHandler>
 800205a:	bf00      	nop
 800205c:	20000110 	.word	0x20000110

08002060 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	490f      	ldr	r1, [pc, #60]	; (80020a0 <SystemInit+0x40>)
 8002062:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002066:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <SystemInit+0x44>)
 8002070:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002072:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800207a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002086:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002088:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <SystemInit+0x48>)
 800208a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002092:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002094:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800209a:	608b      	str	r3, [r1, #8]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	24003010 	.word	0x24003010

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
  ldr  r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d6:	f7ff ffc3 	bl	8002060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f000 f811 	bl	8002100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff fdc7 	bl	8001c70 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020e8:	08002a44 	.word	0x08002a44
  ldr  r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80020f4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80020f8:	200001f8 	.word	0x200001f8

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <__libc_init_array>:
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4e0d      	ldr	r6, [pc, #52]	; (8002138 <__libc_init_array+0x38>)
 8002104:	4c0d      	ldr	r4, [pc, #52]	; (800213c <__libc_init_array+0x3c>)
 8002106:	1ba4      	subs	r4, r4, r6
 8002108:	10a4      	asrs	r4, r4, #2
 800210a:	2500      	movs	r5, #0
 800210c:	42a5      	cmp	r5, r4
 800210e:	d109      	bne.n	8002124 <__libc_init_array+0x24>
 8002110:	4e0b      	ldr	r6, [pc, #44]	; (8002140 <__libc_init_array+0x40>)
 8002112:	4c0c      	ldr	r4, [pc, #48]	; (8002144 <__libc_init_array+0x44>)
 8002114:	f000 fc5a 	bl	80029cc <_init>
 8002118:	1ba4      	subs	r4, r4, r6
 800211a:	10a4      	asrs	r4, r4, #2
 800211c:	2500      	movs	r5, #0
 800211e:	42a5      	cmp	r5, r4
 8002120:	d105      	bne.n	800212e <__libc_init_array+0x2e>
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002128:	4798      	blx	r3
 800212a:	3501      	adds	r5, #1
 800212c:	e7ee      	b.n	800210c <__libc_init_array+0xc>
 800212e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002132:	4798      	blx	r3
 8002134:	3501      	adds	r5, #1
 8002136:	e7f2      	b.n	800211e <__libc_init_array+0x1e>
 8002138:	08002a3c 	.word	0x08002a3c
 800213c:	08002a3c 	.word	0x08002a3c
 8002140:	08002a3c 	.word	0x08002a3c
 8002144:	08002a40 	.word	0x08002a40

08002148 <memcpy>:
 8002148:	b510      	push	{r4, lr}
 800214a:	1e43      	subs	r3, r0, #1
 800214c:	440a      	add	r2, r1
 800214e:	4291      	cmp	r1, r2
 8002150:	d100      	bne.n	8002154 <memcpy+0xc>
 8002152:	bd10      	pop	{r4, pc}
 8002154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800215c:	e7f7      	b.n	800214e <memcpy+0x6>

0800215e <memset>:
 800215e:	4402      	add	r2, r0
 8002160:	4603      	mov	r3, r0
 8002162:	4293      	cmp	r3, r2
 8002164:	d100      	bne.n	8002168 <memset+0xa>
 8002166:	4770      	bx	lr
 8002168:	f803 1b01 	strb.w	r1, [r3], #1
 800216c:	e7f9      	b.n	8002162 <memset+0x4>
	...

08002170 <siprintf>:
 8002170:	b40e      	push	{r1, r2, r3}
 8002172:	b500      	push	{lr}
 8002174:	b09c      	sub	sp, #112	; 0x70
 8002176:	f44f 7102 	mov.w	r1, #520	; 0x208
 800217a:	ab1d      	add	r3, sp, #116	; 0x74
 800217c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002180:	9002      	str	r0, [sp, #8]
 8002182:	9006      	str	r0, [sp, #24]
 8002184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <siprintf+0x44>)
 800218a:	9104      	str	r1, [sp, #16]
 800218c:	9107      	str	r1, [sp, #28]
 800218e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002192:	f853 2b04 	ldr.w	r2, [r3], #4
 8002196:	f8ad 1016 	strh.w	r1, [sp, #22]
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	a902      	add	r1, sp, #8
 80021a0:	f000 f874 	bl	800228c <_svfiprintf_r>
 80021a4:	9b02      	ldr	r3, [sp, #8]
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	b01c      	add	sp, #112	; 0x70
 80021ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80021b0:	b003      	add	sp, #12
 80021b2:	4770      	bx	lr
 80021b4:	2000001c 	.word	0x2000001c

080021b8 <strcat>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	4602      	mov	r2, r0
 80021bc:	4613      	mov	r3, r2
 80021be:	3201      	adds	r2, #1
 80021c0:	781c      	ldrb	r4, [r3, #0]
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	d1fa      	bne.n	80021bc <strcat+0x4>
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d1f9      	bne.n	80021c8 <strcat+0x10>
 80021d4:	bd10      	pop	{r4, pc}

080021d6 <__ssputs_r>:
 80021d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021da:	688e      	ldr	r6, [r1, #8]
 80021dc:	429e      	cmp	r6, r3
 80021de:	4682      	mov	sl, r0
 80021e0:	460c      	mov	r4, r1
 80021e2:	4691      	mov	r9, r2
 80021e4:	4698      	mov	r8, r3
 80021e6:	d835      	bhi.n	8002254 <__ssputs_r+0x7e>
 80021e8:	898a      	ldrh	r2, [r1, #12]
 80021ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80021ee:	d031      	beq.n	8002254 <__ssputs_r+0x7e>
 80021f0:	6825      	ldr	r5, [r4, #0]
 80021f2:	6909      	ldr	r1, [r1, #16]
 80021f4:	1a6f      	subs	r7, r5, r1
 80021f6:	6965      	ldr	r5, [r4, #20]
 80021f8:	2302      	movs	r3, #2
 80021fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8002202:	f108 0301 	add.w	r3, r8, #1
 8002206:	443b      	add	r3, r7
 8002208:	429d      	cmp	r5, r3
 800220a:	bf38      	it	cc
 800220c:	461d      	movcc	r5, r3
 800220e:	0553      	lsls	r3, r2, #21
 8002210:	d531      	bpl.n	8002276 <__ssputs_r+0xa0>
 8002212:	4629      	mov	r1, r5
 8002214:	f000 fb2c 	bl	8002870 <_malloc_r>
 8002218:	4606      	mov	r6, r0
 800221a:	b950      	cbnz	r0, 8002232 <__ssputs_r+0x5c>
 800221c:	230c      	movs	r3, #12
 800221e:	f8ca 3000 	str.w	r3, [sl]
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002228:	81a3      	strh	r3, [r4, #12]
 800222a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800222e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002232:	463a      	mov	r2, r7
 8002234:	6921      	ldr	r1, [r4, #16]
 8002236:	f7ff ff87 	bl	8002148 <memcpy>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	81a3      	strh	r3, [r4, #12]
 8002246:	6126      	str	r6, [r4, #16]
 8002248:	6165      	str	r5, [r4, #20]
 800224a:	443e      	add	r6, r7
 800224c:	1bed      	subs	r5, r5, r7
 800224e:	6026      	str	r6, [r4, #0]
 8002250:	60a5      	str	r5, [r4, #8]
 8002252:	4646      	mov	r6, r8
 8002254:	4546      	cmp	r6, r8
 8002256:	bf28      	it	cs
 8002258:	4646      	movcs	r6, r8
 800225a:	4632      	mov	r2, r6
 800225c:	4649      	mov	r1, r9
 800225e:	6820      	ldr	r0, [r4, #0]
 8002260:	f000 fa9e 	bl	80027a0 <memmove>
 8002264:	68a3      	ldr	r3, [r4, #8]
 8002266:	1b9b      	subs	r3, r3, r6
 8002268:	60a3      	str	r3, [r4, #8]
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	441e      	add	r6, r3
 800226e:	6026      	str	r6, [r4, #0]
 8002270:	2000      	movs	r0, #0
 8002272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002276:	462a      	mov	r2, r5
 8002278:	f000 fb58 	bl	800292c <_realloc_r>
 800227c:	4606      	mov	r6, r0
 800227e:	2800      	cmp	r0, #0
 8002280:	d1e1      	bne.n	8002246 <__ssputs_r+0x70>
 8002282:	6921      	ldr	r1, [r4, #16]
 8002284:	4650      	mov	r0, sl
 8002286:	f000 faa5 	bl	80027d4 <_free_r>
 800228a:	e7c7      	b.n	800221c <__ssputs_r+0x46>

0800228c <_svfiprintf_r>:
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	b09d      	sub	sp, #116	; 0x74
 8002292:	4680      	mov	r8, r0
 8002294:	9303      	str	r3, [sp, #12]
 8002296:	898b      	ldrh	r3, [r1, #12]
 8002298:	061c      	lsls	r4, r3, #24
 800229a:	460d      	mov	r5, r1
 800229c:	4616      	mov	r6, r2
 800229e:	d50f      	bpl.n	80022c0 <_svfiprintf_r+0x34>
 80022a0:	690b      	ldr	r3, [r1, #16]
 80022a2:	b96b      	cbnz	r3, 80022c0 <_svfiprintf_r+0x34>
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	f000 fae3 	bl	8002870 <_malloc_r>
 80022aa:	6028      	str	r0, [r5, #0]
 80022ac:	6128      	str	r0, [r5, #16]
 80022ae:	b928      	cbnz	r0, 80022bc <_svfiprintf_r+0x30>
 80022b0:	230c      	movs	r3, #12
 80022b2:	f8c8 3000 	str.w	r3, [r8]
 80022b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ba:	e0c5      	b.n	8002448 <_svfiprintf_r+0x1bc>
 80022bc:	2340      	movs	r3, #64	; 0x40
 80022be:	616b      	str	r3, [r5, #20]
 80022c0:	2300      	movs	r3, #0
 80022c2:	9309      	str	r3, [sp, #36]	; 0x24
 80022c4:	2320      	movs	r3, #32
 80022c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022ca:	2330      	movs	r3, #48	; 0x30
 80022cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022d0:	f04f 0b01 	mov.w	fp, #1
 80022d4:	4637      	mov	r7, r6
 80022d6:	463c      	mov	r4, r7
 80022d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d13c      	bne.n	800235a <_svfiprintf_r+0xce>
 80022e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80022e4:	d00b      	beq.n	80022fe <_svfiprintf_r+0x72>
 80022e6:	4653      	mov	r3, sl
 80022e8:	4632      	mov	r2, r6
 80022ea:	4629      	mov	r1, r5
 80022ec:	4640      	mov	r0, r8
 80022ee:	f7ff ff72 	bl	80021d6 <__ssputs_r>
 80022f2:	3001      	adds	r0, #1
 80022f4:	f000 80a3 	beq.w	800243e <_svfiprintf_r+0x1b2>
 80022f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022fa:	4453      	add	r3, sl
 80022fc:	9309      	str	r3, [sp, #36]	; 0x24
 80022fe:	783b      	ldrb	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 809c 	beq.w	800243e <_svfiprintf_r+0x1b2>
 8002306:	2300      	movs	r3, #0
 8002308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800230c:	9304      	str	r3, [sp, #16]
 800230e:	9307      	str	r3, [sp, #28]
 8002310:	9205      	str	r2, [sp, #20]
 8002312:	9306      	str	r3, [sp, #24]
 8002314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002318:	931a      	str	r3, [sp, #104]	; 0x68
 800231a:	2205      	movs	r2, #5
 800231c:	7821      	ldrb	r1, [r4, #0]
 800231e:	4850      	ldr	r0, [pc, #320]	; (8002460 <_svfiprintf_r+0x1d4>)
 8002320:	f7fd ff5e 	bl	80001e0 <memchr>
 8002324:	1c67      	adds	r7, r4, #1
 8002326:	9b04      	ldr	r3, [sp, #16]
 8002328:	b9d8      	cbnz	r0, 8002362 <_svfiprintf_r+0xd6>
 800232a:	06d9      	lsls	r1, r3, #27
 800232c:	bf44      	itt	mi
 800232e:	2220      	movmi	r2, #32
 8002330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002334:	071a      	lsls	r2, r3, #28
 8002336:	bf44      	itt	mi
 8002338:	222b      	movmi	r2, #43	; 0x2b
 800233a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800233e:	7822      	ldrb	r2, [r4, #0]
 8002340:	2a2a      	cmp	r2, #42	; 0x2a
 8002342:	d016      	beq.n	8002372 <_svfiprintf_r+0xe6>
 8002344:	9a07      	ldr	r2, [sp, #28]
 8002346:	2100      	movs	r1, #0
 8002348:	200a      	movs	r0, #10
 800234a:	4627      	mov	r7, r4
 800234c:	3401      	adds	r4, #1
 800234e:	783b      	ldrb	r3, [r7, #0]
 8002350:	3b30      	subs	r3, #48	; 0x30
 8002352:	2b09      	cmp	r3, #9
 8002354:	d951      	bls.n	80023fa <_svfiprintf_r+0x16e>
 8002356:	b1c9      	cbz	r1, 800238c <_svfiprintf_r+0x100>
 8002358:	e011      	b.n	800237e <_svfiprintf_r+0xf2>
 800235a:	2b25      	cmp	r3, #37	; 0x25
 800235c:	d0c0      	beq.n	80022e0 <_svfiprintf_r+0x54>
 800235e:	4627      	mov	r7, r4
 8002360:	e7b9      	b.n	80022d6 <_svfiprintf_r+0x4a>
 8002362:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <_svfiprintf_r+0x1d4>)
 8002364:	1a80      	subs	r0, r0, r2
 8002366:	fa0b f000 	lsl.w	r0, fp, r0
 800236a:	4318      	orrs	r0, r3
 800236c:	9004      	str	r0, [sp, #16]
 800236e:	463c      	mov	r4, r7
 8002370:	e7d3      	b.n	800231a <_svfiprintf_r+0x8e>
 8002372:	9a03      	ldr	r2, [sp, #12]
 8002374:	1d11      	adds	r1, r2, #4
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	9103      	str	r1, [sp, #12]
 800237a:	2a00      	cmp	r2, #0
 800237c:	db01      	blt.n	8002382 <_svfiprintf_r+0xf6>
 800237e:	9207      	str	r2, [sp, #28]
 8002380:	e004      	b.n	800238c <_svfiprintf_r+0x100>
 8002382:	4252      	negs	r2, r2
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	9207      	str	r2, [sp, #28]
 800238a:	9304      	str	r3, [sp, #16]
 800238c:	783b      	ldrb	r3, [r7, #0]
 800238e:	2b2e      	cmp	r3, #46	; 0x2e
 8002390:	d10e      	bne.n	80023b0 <_svfiprintf_r+0x124>
 8002392:	787b      	ldrb	r3, [r7, #1]
 8002394:	2b2a      	cmp	r3, #42	; 0x2a
 8002396:	f107 0101 	add.w	r1, r7, #1
 800239a:	d132      	bne.n	8002402 <_svfiprintf_r+0x176>
 800239c:	9b03      	ldr	r3, [sp, #12]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	9203      	str	r2, [sp, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bfb8      	it	lt
 80023a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80023ac:	3702      	adds	r7, #2
 80023ae:	9305      	str	r3, [sp, #20]
 80023b0:	4c2c      	ldr	r4, [pc, #176]	; (8002464 <_svfiprintf_r+0x1d8>)
 80023b2:	7839      	ldrb	r1, [r7, #0]
 80023b4:	2203      	movs	r2, #3
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7fd ff12 	bl	80001e0 <memchr>
 80023bc:	b138      	cbz	r0, 80023ce <_svfiprintf_r+0x142>
 80023be:	2340      	movs	r3, #64	; 0x40
 80023c0:	1b00      	subs	r0, r0, r4
 80023c2:	fa03 f000 	lsl.w	r0, r3, r0
 80023c6:	9b04      	ldr	r3, [sp, #16]
 80023c8:	4303      	orrs	r3, r0
 80023ca:	9304      	str	r3, [sp, #16]
 80023cc:	3701      	adds	r7, #1
 80023ce:	7839      	ldrb	r1, [r7, #0]
 80023d0:	4825      	ldr	r0, [pc, #148]	; (8002468 <_svfiprintf_r+0x1dc>)
 80023d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023d6:	2206      	movs	r2, #6
 80023d8:	1c7e      	adds	r6, r7, #1
 80023da:	f7fd ff01 	bl	80001e0 <memchr>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d035      	beq.n	800244e <_svfiprintf_r+0x1c2>
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <_svfiprintf_r+0x1e0>)
 80023e4:	b9fb      	cbnz	r3, 8002426 <_svfiprintf_r+0x19a>
 80023e6:	9b03      	ldr	r3, [sp, #12]
 80023e8:	3307      	adds	r3, #7
 80023ea:	f023 0307 	bic.w	r3, r3, #7
 80023ee:	3308      	adds	r3, #8
 80023f0:	9303      	str	r3, [sp, #12]
 80023f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023f4:	444b      	add	r3, r9
 80023f6:	9309      	str	r3, [sp, #36]	; 0x24
 80023f8:	e76c      	b.n	80022d4 <_svfiprintf_r+0x48>
 80023fa:	fb00 3202 	mla	r2, r0, r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	e7a3      	b.n	800234a <_svfiprintf_r+0xbe>
 8002402:	2300      	movs	r3, #0
 8002404:	9305      	str	r3, [sp, #20]
 8002406:	4618      	mov	r0, r3
 8002408:	240a      	movs	r4, #10
 800240a:	460f      	mov	r7, r1
 800240c:	3101      	adds	r1, #1
 800240e:	783a      	ldrb	r2, [r7, #0]
 8002410:	3a30      	subs	r2, #48	; 0x30
 8002412:	2a09      	cmp	r2, #9
 8002414:	d903      	bls.n	800241e <_svfiprintf_r+0x192>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ca      	beq.n	80023b0 <_svfiprintf_r+0x124>
 800241a:	9005      	str	r0, [sp, #20]
 800241c:	e7c8      	b.n	80023b0 <_svfiprintf_r+0x124>
 800241e:	fb04 2000 	mla	r0, r4, r0, r2
 8002422:	2301      	movs	r3, #1
 8002424:	e7f1      	b.n	800240a <_svfiprintf_r+0x17e>
 8002426:	ab03      	add	r3, sp, #12
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	462a      	mov	r2, r5
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_svfiprintf_r+0x1e4>)
 800242e:	a904      	add	r1, sp, #16
 8002430:	4640      	mov	r0, r8
 8002432:	f3af 8000 	nop.w
 8002436:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800243a:	4681      	mov	r9, r0
 800243c:	d1d9      	bne.n	80023f2 <_svfiprintf_r+0x166>
 800243e:	89ab      	ldrh	r3, [r5, #12]
 8002440:	065b      	lsls	r3, r3, #25
 8002442:	f53f af38 	bmi.w	80022b6 <_svfiprintf_r+0x2a>
 8002446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002448:	b01d      	add	sp, #116	; 0x74
 800244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800244e:	ab03      	add	r3, sp, #12
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	462a      	mov	r2, r5
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <_svfiprintf_r+0x1e4>)
 8002456:	a904      	add	r1, sp, #16
 8002458:	4640      	mov	r0, r8
 800245a:	f000 f881 	bl	8002560 <_printf_i>
 800245e:	e7ea      	b.n	8002436 <_svfiprintf_r+0x1aa>
 8002460:	08002a01 	.word	0x08002a01
 8002464:	08002a07 	.word	0x08002a07
 8002468:	08002a0b 	.word	0x08002a0b
 800246c:	00000000 	.word	0x00000000
 8002470:	080021d7 	.word	0x080021d7

08002474 <_printf_common>:
 8002474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002478:	4691      	mov	r9, r2
 800247a:	461f      	mov	r7, r3
 800247c:	688a      	ldr	r2, [r1, #8]
 800247e:	690b      	ldr	r3, [r1, #16]
 8002480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002484:	4293      	cmp	r3, r2
 8002486:	bfb8      	it	lt
 8002488:	4613      	movlt	r3, r2
 800248a:	f8c9 3000 	str.w	r3, [r9]
 800248e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002492:	4606      	mov	r6, r0
 8002494:	460c      	mov	r4, r1
 8002496:	b112      	cbz	r2, 800249e <_printf_common+0x2a>
 8002498:	3301      	adds	r3, #1
 800249a:	f8c9 3000 	str.w	r3, [r9]
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	0699      	lsls	r1, r3, #26
 80024a2:	bf42      	ittt	mi
 80024a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80024a8:	3302      	addmi	r3, #2
 80024aa:	f8c9 3000 	strmi.w	r3, [r9]
 80024ae:	6825      	ldr	r5, [r4, #0]
 80024b0:	f015 0506 	ands.w	r5, r5, #6
 80024b4:	d107      	bne.n	80024c6 <_printf_common+0x52>
 80024b6:	f104 0a19 	add.w	sl, r4, #25
 80024ba:	68e3      	ldr	r3, [r4, #12]
 80024bc:	f8d9 2000 	ldr.w	r2, [r9]
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	429d      	cmp	r5, r3
 80024c4:	db29      	blt.n	800251a <_printf_common+0xa6>
 80024c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	3300      	adds	r3, #0
 80024ce:	bf18      	it	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	0692      	lsls	r2, r2, #26
 80024d4:	d42e      	bmi.n	8002534 <_printf_common+0xc0>
 80024d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024da:	4639      	mov	r1, r7
 80024dc:	4630      	mov	r0, r6
 80024de:	47c0      	blx	r8
 80024e0:	3001      	adds	r0, #1
 80024e2:	d021      	beq.n	8002528 <_printf_common+0xb4>
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	68e5      	ldr	r5, [r4, #12]
 80024e8:	f8d9 2000 	ldr.w	r2, [r9]
 80024ec:	f003 0306 	and.w	r3, r3, #6
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	bf08      	it	eq
 80024f4:	1aad      	subeq	r5, r5, r2
 80024f6:	68a3      	ldr	r3, [r4, #8]
 80024f8:	6922      	ldr	r2, [r4, #16]
 80024fa:	bf0c      	ite	eq
 80024fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002500:	2500      	movne	r5, #0
 8002502:	4293      	cmp	r3, r2
 8002504:	bfc4      	itt	gt
 8002506:	1a9b      	subgt	r3, r3, r2
 8002508:	18ed      	addgt	r5, r5, r3
 800250a:	f04f 0900 	mov.w	r9, #0
 800250e:	341a      	adds	r4, #26
 8002510:	454d      	cmp	r5, r9
 8002512:	d11b      	bne.n	800254c <_printf_common+0xd8>
 8002514:	2000      	movs	r0, #0
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251a:	2301      	movs	r3, #1
 800251c:	4652      	mov	r2, sl
 800251e:	4639      	mov	r1, r7
 8002520:	4630      	mov	r0, r6
 8002522:	47c0      	blx	r8
 8002524:	3001      	adds	r0, #1
 8002526:	d103      	bne.n	8002530 <_printf_common+0xbc>
 8002528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002530:	3501      	adds	r5, #1
 8002532:	e7c2      	b.n	80024ba <_printf_common+0x46>
 8002534:	18e1      	adds	r1, r4, r3
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	2030      	movs	r0, #48	; 0x30
 800253a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800253e:	4422      	add	r2, r4
 8002540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002548:	3302      	adds	r3, #2
 800254a:	e7c4      	b.n	80024d6 <_printf_common+0x62>
 800254c:	2301      	movs	r3, #1
 800254e:	4622      	mov	r2, r4
 8002550:	4639      	mov	r1, r7
 8002552:	4630      	mov	r0, r6
 8002554:	47c0      	blx	r8
 8002556:	3001      	adds	r0, #1
 8002558:	d0e6      	beq.n	8002528 <_printf_common+0xb4>
 800255a:	f109 0901 	add.w	r9, r9, #1
 800255e:	e7d7      	b.n	8002510 <_printf_common+0x9c>

08002560 <_printf_i>:
 8002560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002564:	4617      	mov	r7, r2
 8002566:	7e0a      	ldrb	r2, [r1, #24]
 8002568:	b085      	sub	sp, #20
 800256a:	2a6e      	cmp	r2, #110	; 0x6e
 800256c:	4698      	mov	r8, r3
 800256e:	4606      	mov	r6, r0
 8002570:	460c      	mov	r4, r1
 8002572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002574:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002578:	f000 80bc 	beq.w	80026f4 <_printf_i+0x194>
 800257c:	d81a      	bhi.n	80025b4 <_printf_i+0x54>
 800257e:	2a63      	cmp	r2, #99	; 0x63
 8002580:	d02e      	beq.n	80025e0 <_printf_i+0x80>
 8002582:	d80a      	bhi.n	800259a <_printf_i+0x3a>
 8002584:	2a00      	cmp	r2, #0
 8002586:	f000 80c8 	beq.w	800271a <_printf_i+0x1ba>
 800258a:	2a58      	cmp	r2, #88	; 0x58
 800258c:	f000 808a 	beq.w	80026a4 <_printf_i+0x144>
 8002590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002594:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002598:	e02a      	b.n	80025f0 <_printf_i+0x90>
 800259a:	2a64      	cmp	r2, #100	; 0x64
 800259c:	d001      	beq.n	80025a2 <_printf_i+0x42>
 800259e:	2a69      	cmp	r2, #105	; 0x69
 80025a0:	d1f6      	bne.n	8002590 <_printf_i+0x30>
 80025a2:	6821      	ldr	r1, [r4, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80025aa:	d023      	beq.n	80025f4 <_printf_i+0x94>
 80025ac:	1d11      	adds	r1, r2, #4
 80025ae:	6019      	str	r1, [r3, #0]
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	e027      	b.n	8002604 <_printf_i+0xa4>
 80025b4:	2a73      	cmp	r2, #115	; 0x73
 80025b6:	f000 80b4 	beq.w	8002722 <_printf_i+0x1c2>
 80025ba:	d808      	bhi.n	80025ce <_printf_i+0x6e>
 80025bc:	2a6f      	cmp	r2, #111	; 0x6f
 80025be:	d02a      	beq.n	8002616 <_printf_i+0xb6>
 80025c0:	2a70      	cmp	r2, #112	; 0x70
 80025c2:	d1e5      	bne.n	8002590 <_printf_i+0x30>
 80025c4:	680a      	ldr	r2, [r1, #0]
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	600a      	str	r2, [r1, #0]
 80025cc:	e003      	b.n	80025d6 <_printf_i+0x76>
 80025ce:	2a75      	cmp	r2, #117	; 0x75
 80025d0:	d021      	beq.n	8002616 <_printf_i+0xb6>
 80025d2:	2a78      	cmp	r2, #120	; 0x78
 80025d4:	d1dc      	bne.n	8002590 <_printf_i+0x30>
 80025d6:	2278      	movs	r2, #120	; 0x78
 80025d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80025dc:	496e      	ldr	r1, [pc, #440]	; (8002798 <_printf_i+0x238>)
 80025de:	e064      	b.n	80026aa <_printf_i+0x14a>
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80025e6:	1d11      	adds	r1, r2, #4
 80025e8:	6019      	str	r1, [r3, #0]
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0a3      	b.n	800273c <_printf_i+0x1dc>
 80025f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80025f8:	f102 0104 	add.w	r1, r2, #4
 80025fc:	6019      	str	r1, [r3, #0]
 80025fe:	d0d7      	beq.n	80025b0 <_printf_i+0x50>
 8002600:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	da03      	bge.n	8002610 <_printf_i+0xb0>
 8002608:	222d      	movs	r2, #45	; 0x2d
 800260a:	425b      	negs	r3, r3
 800260c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002610:	4962      	ldr	r1, [pc, #392]	; (800279c <_printf_i+0x23c>)
 8002612:	220a      	movs	r2, #10
 8002614:	e017      	b.n	8002646 <_printf_i+0xe6>
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800261e:	d003      	beq.n	8002628 <_printf_i+0xc8>
 8002620:	1d08      	adds	r0, r1, #4
 8002622:	6018      	str	r0, [r3, #0]
 8002624:	680b      	ldr	r3, [r1, #0]
 8002626:	e006      	b.n	8002636 <_printf_i+0xd6>
 8002628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800262c:	f101 0004 	add.w	r0, r1, #4
 8002630:	6018      	str	r0, [r3, #0]
 8002632:	d0f7      	beq.n	8002624 <_printf_i+0xc4>
 8002634:	880b      	ldrh	r3, [r1, #0]
 8002636:	4959      	ldr	r1, [pc, #356]	; (800279c <_printf_i+0x23c>)
 8002638:	2a6f      	cmp	r2, #111	; 0x6f
 800263a:	bf14      	ite	ne
 800263c:	220a      	movne	r2, #10
 800263e:	2208      	moveq	r2, #8
 8002640:	2000      	movs	r0, #0
 8002642:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002646:	6865      	ldr	r5, [r4, #4]
 8002648:	60a5      	str	r5, [r4, #8]
 800264a:	2d00      	cmp	r5, #0
 800264c:	f2c0 809c 	blt.w	8002788 <_printf_i+0x228>
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	f020 0004 	bic.w	r0, r0, #4
 8002656:	6020      	str	r0, [r4, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d13f      	bne.n	80026dc <_printf_i+0x17c>
 800265c:	2d00      	cmp	r5, #0
 800265e:	f040 8095 	bne.w	800278c <_printf_i+0x22c>
 8002662:	4675      	mov	r5, lr
 8002664:	2a08      	cmp	r2, #8
 8002666:	d10b      	bne.n	8002680 <_printf_i+0x120>
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	07da      	lsls	r2, r3, #31
 800266c:	d508      	bpl.n	8002680 <_printf_i+0x120>
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	6862      	ldr	r2, [r4, #4]
 8002672:	429a      	cmp	r2, r3
 8002674:	bfde      	ittt	le
 8002676:	2330      	movle	r3, #48	; 0x30
 8002678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800267c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002680:	ebae 0305 	sub.w	r3, lr, r5
 8002684:	6123      	str	r3, [r4, #16]
 8002686:	f8cd 8000 	str.w	r8, [sp]
 800268a:	463b      	mov	r3, r7
 800268c:	aa03      	add	r2, sp, #12
 800268e:	4621      	mov	r1, r4
 8002690:	4630      	mov	r0, r6
 8002692:	f7ff feef 	bl	8002474 <_printf_common>
 8002696:	3001      	adds	r0, #1
 8002698:	d155      	bne.n	8002746 <_printf_i+0x1e6>
 800269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800269e:	b005      	add	sp, #20
 80026a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80026a8:	493c      	ldr	r1, [pc, #240]	; (800279c <_printf_i+0x23c>)
 80026aa:	6822      	ldr	r2, [r4, #0]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026b2:	f100 0504 	add.w	r5, r0, #4
 80026b6:	601d      	str	r5, [r3, #0]
 80026b8:	d001      	beq.n	80026be <_printf_i+0x15e>
 80026ba:	6803      	ldr	r3, [r0, #0]
 80026bc:	e002      	b.n	80026c4 <_printf_i+0x164>
 80026be:	0655      	lsls	r5, r2, #25
 80026c0:	d5fb      	bpl.n	80026ba <_printf_i+0x15a>
 80026c2:	8803      	ldrh	r3, [r0, #0]
 80026c4:	07d0      	lsls	r0, r2, #31
 80026c6:	bf44      	itt	mi
 80026c8:	f042 0220 	orrmi.w	r2, r2, #32
 80026cc:	6022      	strmi	r2, [r4, #0]
 80026ce:	b91b      	cbnz	r3, 80026d8 <_printf_i+0x178>
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	f022 0220 	bic.w	r2, r2, #32
 80026d6:	6022      	str	r2, [r4, #0]
 80026d8:	2210      	movs	r2, #16
 80026da:	e7b1      	b.n	8002640 <_printf_i+0xe0>
 80026dc:	4675      	mov	r5, lr
 80026de:	fbb3 f0f2 	udiv	r0, r3, r2
 80026e2:	fb02 3310 	mls	r3, r2, r0, r3
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80026ec:	4603      	mov	r3, r0
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d1f5      	bne.n	80026de <_printf_i+0x17e>
 80026f2:	e7b7      	b.n	8002664 <_printf_i+0x104>
 80026f4:	6808      	ldr	r0, [r1, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	6949      	ldr	r1, [r1, #20]
 80026fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80026fe:	d004      	beq.n	800270a <_printf_i+0x1aa>
 8002700:	1d10      	adds	r0, r2, #4
 8002702:	6018      	str	r0, [r3, #0]
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	6019      	str	r1, [r3, #0]
 8002708:	e007      	b.n	800271a <_printf_i+0x1ba>
 800270a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800270e:	f102 0004 	add.w	r0, r2, #4
 8002712:	6018      	str	r0, [r3, #0]
 8002714:	6813      	ldr	r3, [r2, #0]
 8002716:	d0f6      	beq.n	8002706 <_printf_i+0x1a6>
 8002718:	8019      	strh	r1, [r3, #0]
 800271a:	2300      	movs	r3, #0
 800271c:	6123      	str	r3, [r4, #16]
 800271e:	4675      	mov	r5, lr
 8002720:	e7b1      	b.n	8002686 <_printf_i+0x126>
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	1d11      	adds	r1, r2, #4
 8002726:	6019      	str	r1, [r3, #0]
 8002728:	6815      	ldr	r5, [r2, #0]
 800272a:	6862      	ldr	r2, [r4, #4]
 800272c:	2100      	movs	r1, #0
 800272e:	4628      	mov	r0, r5
 8002730:	f7fd fd56 	bl	80001e0 <memchr>
 8002734:	b108      	cbz	r0, 800273a <_printf_i+0x1da>
 8002736:	1b40      	subs	r0, r0, r5
 8002738:	6060      	str	r0, [r4, #4]
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	6123      	str	r3, [r4, #16]
 800273e:	2300      	movs	r3, #0
 8002740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002744:	e79f      	b.n	8002686 <_printf_i+0x126>
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	462a      	mov	r2, r5
 800274a:	4639      	mov	r1, r7
 800274c:	4630      	mov	r0, r6
 800274e:	47c0      	blx	r8
 8002750:	3001      	adds	r0, #1
 8002752:	d0a2      	beq.n	800269a <_printf_i+0x13a>
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	079b      	lsls	r3, r3, #30
 8002758:	d507      	bpl.n	800276a <_printf_i+0x20a>
 800275a:	2500      	movs	r5, #0
 800275c:	f104 0919 	add.w	r9, r4, #25
 8002760:	68e3      	ldr	r3, [r4, #12]
 8002762:	9a03      	ldr	r2, [sp, #12]
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	429d      	cmp	r5, r3
 8002768:	db05      	blt.n	8002776 <_printf_i+0x216>
 800276a:	68e0      	ldr	r0, [r4, #12]
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	4298      	cmp	r0, r3
 8002770:	bfb8      	it	lt
 8002772:	4618      	movlt	r0, r3
 8002774:	e793      	b.n	800269e <_printf_i+0x13e>
 8002776:	2301      	movs	r3, #1
 8002778:	464a      	mov	r2, r9
 800277a:	4639      	mov	r1, r7
 800277c:	4630      	mov	r0, r6
 800277e:	47c0      	blx	r8
 8002780:	3001      	adds	r0, #1
 8002782:	d08a      	beq.n	800269a <_printf_i+0x13a>
 8002784:	3501      	adds	r5, #1
 8002786:	e7eb      	b.n	8002760 <_printf_i+0x200>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1a7      	bne.n	80026dc <_printf_i+0x17c>
 800278c:	780b      	ldrb	r3, [r1, #0]
 800278e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002796:	e765      	b.n	8002664 <_printf_i+0x104>
 8002798:	08002a23 	.word	0x08002a23
 800279c:	08002a12 	.word	0x08002a12

080027a0 <memmove>:
 80027a0:	4288      	cmp	r0, r1
 80027a2:	b510      	push	{r4, lr}
 80027a4:	eb01 0302 	add.w	r3, r1, r2
 80027a8:	d803      	bhi.n	80027b2 <memmove+0x12>
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d10c      	bne.n	80027ca <memmove+0x2a>
 80027b0:	bd10      	pop	{r4, pc}
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d2f9      	bcs.n	80027aa <memmove+0xa>
 80027b6:	1881      	adds	r1, r0, r2
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	42d3      	cmn	r3, r2
 80027bc:	d100      	bne.n	80027c0 <memmove+0x20>
 80027be:	bd10      	pop	{r4, pc}
 80027c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80027c8:	e7f7      	b.n	80027ba <memmove+0x1a>
 80027ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80027d2:	e7eb      	b.n	80027ac <memmove+0xc>

080027d4 <_free_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4605      	mov	r5, r0
 80027d8:	2900      	cmp	r1, #0
 80027da:	d045      	beq.n	8002868 <_free_r+0x94>
 80027dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e0:	1f0c      	subs	r4, r1, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfb8      	it	lt
 80027e6:	18e4      	addlt	r4, r4, r3
 80027e8:	f000 f8d6 	bl	8002998 <__malloc_lock>
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <_free_r+0x98>)
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	4610      	mov	r0, r2
 80027f2:	b933      	cbnz	r3, 8002802 <_free_r+0x2e>
 80027f4:	6063      	str	r3, [r4, #4]
 80027f6:	6014      	str	r4, [r2, #0]
 80027f8:	4628      	mov	r0, r5
 80027fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027fe:	f000 b8cc 	b.w	800299a <__malloc_unlock>
 8002802:	42a3      	cmp	r3, r4
 8002804:	d90c      	bls.n	8002820 <_free_r+0x4c>
 8002806:	6821      	ldr	r1, [r4, #0]
 8002808:	1862      	adds	r2, r4, r1
 800280a:	4293      	cmp	r3, r2
 800280c:	bf04      	itt	eq
 800280e:	681a      	ldreq	r2, [r3, #0]
 8002810:	685b      	ldreq	r3, [r3, #4]
 8002812:	6063      	str	r3, [r4, #4]
 8002814:	bf04      	itt	eq
 8002816:	1852      	addeq	r2, r2, r1
 8002818:	6022      	streq	r2, [r4, #0]
 800281a:	6004      	str	r4, [r0, #0]
 800281c:	e7ec      	b.n	80027f8 <_free_r+0x24>
 800281e:	4613      	mov	r3, r2
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	b10a      	cbz	r2, 8002828 <_free_r+0x54>
 8002824:	42a2      	cmp	r2, r4
 8002826:	d9fa      	bls.n	800281e <_free_r+0x4a>
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	1858      	adds	r0, r3, r1
 800282c:	42a0      	cmp	r0, r4
 800282e:	d10b      	bne.n	8002848 <_free_r+0x74>
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	4401      	add	r1, r0
 8002834:	1858      	adds	r0, r3, r1
 8002836:	4282      	cmp	r2, r0
 8002838:	6019      	str	r1, [r3, #0]
 800283a:	d1dd      	bne.n	80027f8 <_free_r+0x24>
 800283c:	6810      	ldr	r0, [r2, #0]
 800283e:	6852      	ldr	r2, [r2, #4]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	4401      	add	r1, r0
 8002844:	6019      	str	r1, [r3, #0]
 8002846:	e7d7      	b.n	80027f8 <_free_r+0x24>
 8002848:	d902      	bls.n	8002850 <_free_r+0x7c>
 800284a:	230c      	movs	r3, #12
 800284c:	602b      	str	r3, [r5, #0]
 800284e:	e7d3      	b.n	80027f8 <_free_r+0x24>
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	1821      	adds	r1, r4, r0
 8002854:	428a      	cmp	r2, r1
 8002856:	bf04      	itt	eq
 8002858:	6811      	ldreq	r1, [r2, #0]
 800285a:	6852      	ldreq	r2, [r2, #4]
 800285c:	6062      	str	r2, [r4, #4]
 800285e:	bf04      	itt	eq
 8002860:	1809      	addeq	r1, r1, r0
 8002862:	6021      	streq	r1, [r4, #0]
 8002864:	605c      	str	r4, [r3, #4]
 8002866:	e7c7      	b.n	80027f8 <_free_r+0x24>
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	20000100 	.word	0x20000100

08002870 <_malloc_r>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	1ccd      	adds	r5, r1, #3
 8002874:	f025 0503 	bic.w	r5, r5, #3
 8002878:	3508      	adds	r5, #8
 800287a:	2d0c      	cmp	r5, #12
 800287c:	bf38      	it	cc
 800287e:	250c      	movcc	r5, #12
 8002880:	2d00      	cmp	r5, #0
 8002882:	4606      	mov	r6, r0
 8002884:	db01      	blt.n	800288a <_malloc_r+0x1a>
 8002886:	42a9      	cmp	r1, r5
 8002888:	d903      	bls.n	8002892 <_malloc_r+0x22>
 800288a:	230c      	movs	r3, #12
 800288c:	6033      	str	r3, [r6, #0]
 800288e:	2000      	movs	r0, #0
 8002890:	bd70      	pop	{r4, r5, r6, pc}
 8002892:	f000 f881 	bl	8002998 <__malloc_lock>
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <_malloc_r+0xb4>)
 8002898:	6814      	ldr	r4, [r2, #0]
 800289a:	4621      	mov	r1, r4
 800289c:	b991      	cbnz	r1, 80028c4 <_malloc_r+0x54>
 800289e:	4c22      	ldr	r4, [pc, #136]	; (8002928 <_malloc_r+0xb8>)
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	b91b      	cbnz	r3, 80028ac <_malloc_r+0x3c>
 80028a4:	4630      	mov	r0, r6
 80028a6:	f000 f867 	bl	8002978 <_sbrk_r>
 80028aa:	6020      	str	r0, [r4, #0]
 80028ac:	4629      	mov	r1, r5
 80028ae:	4630      	mov	r0, r6
 80028b0:	f000 f862 	bl	8002978 <_sbrk_r>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	d126      	bne.n	8002906 <_malloc_r+0x96>
 80028b8:	230c      	movs	r3, #12
 80028ba:	6033      	str	r3, [r6, #0]
 80028bc:	4630      	mov	r0, r6
 80028be:	f000 f86c 	bl	800299a <__malloc_unlock>
 80028c2:	e7e4      	b.n	800288e <_malloc_r+0x1e>
 80028c4:	680b      	ldr	r3, [r1, #0]
 80028c6:	1b5b      	subs	r3, r3, r5
 80028c8:	d41a      	bmi.n	8002900 <_malloc_r+0x90>
 80028ca:	2b0b      	cmp	r3, #11
 80028cc:	d90f      	bls.n	80028ee <_malloc_r+0x7e>
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	50cd      	str	r5, [r1, r3]
 80028d2:	18cc      	adds	r4, r1, r3
 80028d4:	4630      	mov	r0, r6
 80028d6:	f000 f860 	bl	800299a <__malloc_unlock>
 80028da:	f104 000b 	add.w	r0, r4, #11
 80028de:	1d23      	adds	r3, r4, #4
 80028e0:	f020 0007 	bic.w	r0, r0, #7
 80028e4:	1ac3      	subs	r3, r0, r3
 80028e6:	d01b      	beq.n	8002920 <_malloc_r+0xb0>
 80028e8:	425a      	negs	r2, r3
 80028ea:	50e2      	str	r2, [r4, r3]
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
 80028ee:	428c      	cmp	r4, r1
 80028f0:	bf0d      	iteet	eq
 80028f2:	6863      	ldreq	r3, [r4, #4]
 80028f4:	684b      	ldrne	r3, [r1, #4]
 80028f6:	6063      	strne	r3, [r4, #4]
 80028f8:	6013      	streq	r3, [r2, #0]
 80028fa:	bf18      	it	ne
 80028fc:	460c      	movne	r4, r1
 80028fe:	e7e9      	b.n	80028d4 <_malloc_r+0x64>
 8002900:	460c      	mov	r4, r1
 8002902:	6849      	ldr	r1, [r1, #4]
 8002904:	e7ca      	b.n	800289c <_malloc_r+0x2c>
 8002906:	1cc4      	adds	r4, r0, #3
 8002908:	f024 0403 	bic.w	r4, r4, #3
 800290c:	42a0      	cmp	r0, r4
 800290e:	d005      	beq.n	800291c <_malloc_r+0xac>
 8002910:	1a21      	subs	r1, r4, r0
 8002912:	4630      	mov	r0, r6
 8002914:	f000 f830 	bl	8002978 <_sbrk_r>
 8002918:	3001      	adds	r0, #1
 800291a:	d0cd      	beq.n	80028b8 <_malloc_r+0x48>
 800291c:	6025      	str	r5, [r4, #0]
 800291e:	e7d9      	b.n	80028d4 <_malloc_r+0x64>
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	bf00      	nop
 8002924:	20000100 	.word	0x20000100
 8002928:	20000104 	.word	0x20000104

0800292c <_realloc_r>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	4607      	mov	r7, r0
 8002930:	4614      	mov	r4, r2
 8002932:	460e      	mov	r6, r1
 8002934:	b921      	cbnz	r1, 8002940 <_realloc_r+0x14>
 8002936:	4611      	mov	r1, r2
 8002938:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800293c:	f7ff bf98 	b.w	8002870 <_malloc_r>
 8002940:	b922      	cbnz	r2, 800294c <_realloc_r+0x20>
 8002942:	f7ff ff47 	bl	80027d4 <_free_r>
 8002946:	4625      	mov	r5, r4
 8002948:	4628      	mov	r0, r5
 800294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800294c:	f000 f826 	bl	800299c <_malloc_usable_size_r>
 8002950:	4284      	cmp	r4, r0
 8002952:	d90f      	bls.n	8002974 <_realloc_r+0x48>
 8002954:	4621      	mov	r1, r4
 8002956:	4638      	mov	r0, r7
 8002958:	f7ff ff8a 	bl	8002870 <_malloc_r>
 800295c:	4605      	mov	r5, r0
 800295e:	2800      	cmp	r0, #0
 8002960:	d0f2      	beq.n	8002948 <_realloc_r+0x1c>
 8002962:	4631      	mov	r1, r6
 8002964:	4622      	mov	r2, r4
 8002966:	f7ff fbef 	bl	8002148 <memcpy>
 800296a:	4631      	mov	r1, r6
 800296c:	4638      	mov	r0, r7
 800296e:	f7ff ff31 	bl	80027d4 <_free_r>
 8002972:	e7e9      	b.n	8002948 <_realloc_r+0x1c>
 8002974:	4635      	mov	r5, r6
 8002976:	e7e7      	b.n	8002948 <_realloc_r+0x1c>

08002978 <_sbrk_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4c06      	ldr	r4, [pc, #24]	; (8002994 <_sbrk_r+0x1c>)
 800297c:	2300      	movs	r3, #0
 800297e:	4605      	mov	r5, r0
 8002980:	4608      	mov	r0, r1
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	f000 f814 	bl	80029b0 <_sbrk>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_sbrk_r+0x1a>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	b103      	cbz	r3, 8002992 <_sbrk_r+0x1a>
 8002990:	602b      	str	r3, [r5, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200001f4 	.word	0x200001f4

08002998 <__malloc_lock>:
 8002998:	4770      	bx	lr

0800299a <__malloc_unlock>:
 800299a:	4770      	bx	lr

0800299c <_malloc_usable_size_r>:
 800299c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80029a0:	2800      	cmp	r0, #0
 80029a2:	f1a0 0004 	sub.w	r0, r0, #4
 80029a6:	bfbc      	itt	lt
 80029a8:	580b      	ldrlt	r3, [r1, r0]
 80029aa:	18c0      	addlt	r0, r0, r3
 80029ac:	4770      	bx	lr
	...

080029b0 <_sbrk>:
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <_sbrk+0x14>)
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	4602      	mov	r2, r0
 80029b6:	b909      	cbnz	r1, 80029bc <_sbrk+0xc>
 80029b8:	4903      	ldr	r1, [pc, #12]	; (80029c8 <_sbrk+0x18>)
 80029ba:	6019      	str	r1, [r3, #0]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	4402      	add	r2, r0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	4770      	bx	lr
 80029c4:	20000108 	.word	0x20000108
 80029c8:	200001f8 	.word	0x200001f8

080029cc <_init>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr

080029d8 <_fini>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr
